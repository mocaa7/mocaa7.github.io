{"ast":null,"code":"var _jsxFileName = \"/Users/mocaa7/src/mocaa7/cs5610/wbdv-sp-20-mocaa7-client-react/src/components/CourseEditor/Modules/ModuleListComponent.js\";\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Link } from 'react-router-dom';\nimport '../../../../node_modules/bootstrap/dist/css/bootstrap.css';\nimport '../../../../node_modules/font-awesome/css/font-awesome.min.css';\nimport '../../CourseEditor/CourseEditor.css';\nimport '../../CourseManager/CourseManager.css';\nimport { createModule, deleteModule, findAllModulesForCourse, updateModule } from '../../../actions/moduleActions';\nimport ModuleService from '../../../services/ModuleService';\nimport ModuleListItem from './ModuleListItem';\nimport { getNodeText } from \"@testing-library/react\";\nconst service = new ModuleService();\nvar newTitle = '';\n\nclass ModuleListComponent extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      selectedModule: null,\n      editingModule: null,\n      modules: []\n    };\n    this.state = {\n      selectedModuleId: null,\n      modules: []\n    };\n  }\n\n  componentDidMount() {\n    this.updateModules();\n  }\n\n  async updateModules() {\n    const modules = await service.findModulesForCourse(this.props.courseId);\n    this.setState({\n      modules: modules\n    });\n  }\n\n  componentDidUpdate(prevProps, prevState, snapshot) {\n    console.log('componentDidUpdate');\n\n    if (this.props.courseId !== prevProps.courseId) {\n      console.log('course ID or state changed');\n      this.updateModules();\n    }\n  } // autofocus: Specifies that an <input> element should automatically get focus when the page loads\n  // dirname: Specifies that the text direction will be submitted {inputname.dir}\n  //\n  // updateModuleTitle(event) {\n  //   this.setState(prevState => (\n  //     {module: {...prevState.module, title: event.target.value}}\n  //   ))\n  // }\n\n\n  toggleSelectedModule(module) {\n    this.props.history.push(`/course/${this.props.courseId}/module/${module._id}`);\n    this.setState({\n      selectedModule: module\n    }); // if (this.state.selectedModule === module) {\n    //   this.props.history.push(`/course/${this.props.courseId}`)\n    //   this.setState({selectedModule: null});\n    // }\n  } // async deleteModule(moduleId) {\n  //   await this.props.deleteModule(moduleId);\n  //   this.updateModules();\n  // }\n\n\n  async addModule() {\n    await this.props.createModule(this.props.courseId);\n    this.updateModules();\n  } // async saveModule(module) {\n  //   this.setState({editingModule: null});\n  //   await this.props.updateModule(module._id, module);\n  //   this.updateModules();\n  // }\n  // Goal: take the new text from event.target.value, and update the state\n  // for the given module with this new value.\n  // onModuleTitleChange(event, updatedModule) {\n  //   // newTitle = event.target.value;\n  //   // const newModules = this.state.modules.map(module => {\n  //   //   if (module._id === updatedModule._id) {\n  //   //     return {...module, title: newTitle};\n  //   //   }\n  //   //   return module;\n  //   // });\n  //   // const newModules = this.state.modules.map(module => {\n  //   //   if (module._id === updatedModule._id) {\n  //   //     return {...module, title: newTitle};\n  //   //   }\n  //   //   return module;\n  //   // });\n  //   // this.setState({modules: newModules});\n  //   // const newModules = [...this.state.modules];\n  //   // newModules.forEach(module => {\n  //   //   if (module._id === updatedModule._id) {\n  //   //     module.title = newTitle;\n  //   //   }\n  //   // });\n  // }\n\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    }, React.createElement(\"ul\", {\n      className: \"list-group wbdv-module-list\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    }, this.state.modules && this.state.modules.map(module => // // <li className={`list-group-item wbdv-module-item wbdv-module-item-title\n    // //   ${this.state.selectedModule === module ? 'active' : ''}`}\n    // //   key={module._id}>\n    // <li className={`list-group-item wbdv-module-item wbdv-module-item-title\n    //   ${this.state.selectedModule === module ? 'active' : ''}`}\n    //   onClick={() => this.toggleSelectedModule(module)} key={module._id}>\n    //       {/* {this.state.editingModuleId === module._id <div>\n    //       <input onChange={(e) => this.updateModuleTitle(e)}\n    //         value={this.state.module.title}/>\n    //         <i className=\"fa-2x fa fa-check\"\n    //         onClick={() => {\n    //           this.props.updateModule(this.state.module).then(() =>\n    //           this.setState({editingModuleId: ''}))}}/>\n    //       </div>} */}\n    //   {this.state.editingModule !== module &&\n    //     <div>{module.title}\n    //       <span className=\"float-right\">\n    //         <i className=\"fa fa-trash fa-2x\"\n    //           onClick={() => this.deleteModule(module._id)}/>\n    //         <i className=\"fa fa-pencil fa-2x\"\n    //           onClick={() => this.setState({editingModule: module})}/>\n    //       </span>\n    //     </div>\n    //   }\n    //   {this.state.editingModule === module &&\n    //     <div>\n    //       <input type=\"text\"\n    //       className=\"typing-container\" value={module.title} />\n    //       <span className=\"float-right\">\n    //         <i className=\"fa fa-check fa-2x\"\n    //           onClick={() => this.saveModule(module)}/>\n    //       </span>\n    //     </div>\n    //   }\n    // </li>\n\n    /*\n    {\n      isSelected: boolean\n      module: object\n      onSelect: closure that selects current module\n      onDelete: closure that deletes current module\n      onSave: closure that updates current module and refreshes everything\n    }\n    */\n    React.createElement(ModuleListItem, {\n      isSelected: module._id === this.state.selectedModuleId,\n      module: module,\n      onSelect: this.onSelect.bind(this, module._id),\n      onDelete: this.onDelete.bind(this, module._id),\n      onSave: this.onSave.bind(this, module._id),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157\n      },\n      __self: this\n    }))), React.createElement(\"i\", {\n      className: \"fa fa-plus-circle fa-3x wbdv-add\",\n      onClick: () => this.addModule(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166\n      },\n      __self: this\n    }));\n  }\n\n  onSelect(moduleId) {\n    this.setState({\n      selectedModuleId: moduleId\n    });\n  }\n\n  async onDelete(moduleId) {\n    this.setState({\n      selectedModuleId: moduleId\n    });\n    await this.props.deleteModule(moduleId);\n    await this.updateModules();\n  }\n\n  async onSave(moduleId, newModule) {\n    this.setState({\n      selectedModuleId: null\n    });\n    await this.props.updateModule(moduleId, module);\n    await this.updateModules();\n  }\n\n}\n\nconst stateToPropertyMapper = state => {\n  return {\n    modules: state.modules.modules\n  };\n};\n\nconst dispatchToPropertyMapper = dispatch => {\n  return {\n    createModule: courseId => service.createModule(courseId, {\n      title: 'New module'\n    }).then(actualModule => dispatch(createModule(actualModule, courseId))),\n    findAllModulesForCourse: courseId => service.findModulesForCourse(courseId).then(actualModules => dispatch(findAllModulesForCourse(actualModules))),\n    // TODO: Instead of first getting the modules for course then dispatching the list of modules,\n    // you should instead dispatch something like this:\n    // dispatch({ type: SET_SELECTED_COURSE, courseId: courseId })\n    updateModule: (moduleId, module) => service.updateModule(moduleId, module).then(updatedModule => dispatch(updateModule(updatedModule))),\n    deleteModule: moduleId => service.deleteModule(moduleId).then(status => dispatch(deleteModule(moduleId)))\n  };\n};\n\nexport default connect(stateToPropertyMapper, dispatchToPropertyMapper)(ModuleListComponent);","map":{"version":3,"sources":["/Users/mocaa7/src/mocaa7/cs5610/wbdv-sp-20-mocaa7-client-react/src/components/CourseEditor/Modules/ModuleListComponent.js"],"names":["React","connect","Link","createModule","deleteModule","findAllModulesForCourse","updateModule","ModuleService","ModuleListItem","getNodeText","service","newTitle","ModuleListComponent","Component","state","selectedModule","editingModule","modules","selectedModuleId","componentDidMount","updateModules","findModulesForCourse","props","courseId","setState","componentDidUpdate","prevProps","prevState","snapshot","console","log","toggleSelectedModule","module","history","push","_id","addModule","render","map","onSelect","bind","onDelete","onSave","moduleId","newModule","stateToPropertyMapper","dispatchToPropertyMapper","dispatch","title","then","actualModule","actualModules","updatedModule","status"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport {connect} from \"react-redux\";\nimport {Link} from 'react-router-dom'\nimport '../../../../node_modules/bootstrap/dist/css/bootstrap.css'\nimport '../../../../node_modules/font-awesome/css/font-awesome.min.css';\nimport '../../CourseEditor/CourseEditor.css'\nimport '../../CourseManager/CourseManager.css'\nimport {createModule, deleteModule, findAllModulesForCourse, updateModule} from '../../../actions/moduleActions'\nimport ModuleService from '../../../services/ModuleService';\nimport ModuleListItem from './ModuleListItem';\nimport { getNodeText } from \"@testing-library/react\";\n\nconst service = new ModuleService();\nvar newTitle = '';\n\nclass ModuleListComponent extends React.Component {\n    componentDidMount() {\n      this.updateModules();\n    }\n\n    async updateModules() {\n      const modules = await service.findModulesForCourse(this.props.courseId);\n      this.setState({modules: modules});\n    }\n\n    componentDidUpdate(prevProps, prevState, snapshot) {\n      console.log('componentDidUpdate');\n      if (this.props.courseId !== prevProps.courseId) {\n        console.log('course ID or state changed');\n        this.updateModules();\n      }\n    }\n    // autofocus: Specifies that an <input> element should automatically get focus when the page loads\n    // dirname: Specifies that the text direction will be submitted {inputname.dir}\n    //\n\n    // updateModuleTitle(event) {\n    //   this.setState(prevState => (\n    //     {module: {...prevState.module, title: event.target.value}}\n    //   ))\n    // }\n\n    state = {\n      selectedModule: null,\n      editingModule: null,\n      modules: []\n    };\n\n    toggleSelectedModule(module) {\n      this.props.history.push(`/course/${this.props.courseId}/module/${module._id}`)\n      this.setState({selectedModule: module});\n      // if (this.state.selectedModule === module) {\n      //   this.props.history.push(`/course/${this.props.courseId}`)\n      //   this.setState({selectedModule: null});\n      // }\n    }\n\n    // async deleteModule(moduleId) {\n    //   await this.props.deleteModule(moduleId);\n    //   this.updateModules();\n    // }\n\n    async addModule() {\n      await this.props.createModule(this.props.courseId);\n      this.updateModules();\n    }\n\n    // async saveModule(module) {\n    //   this.setState({editingModule: null});\n    //   await this.props.updateModule(module._id, module);\n    //   this.updateModules();\n    // }\n\n    // Goal: take the new text from event.target.value, and update the state\n    // for the given module with this new value.\n    // onModuleTitleChange(event, updatedModule) {\n    //   // newTitle = event.target.value;\n      \n    //   // const newModules = this.state.modules.map(module => {\n    //   //   if (module._id === updatedModule._id) {\n    //   //     return {...module, title: newTitle};\n    //   //   }\n    //   //   return module;\n    //   // });\n\n    //   // const newModules = this.state.modules.map(module => {\n    //   //   if (module._id === updatedModule._id) {\n    //   //     return {...module, title: newTitle};\n    //   //   }\n    //   //   return module;\n    //   // });\n\n    //   // this.setState({modules: newModules});\n    //   // const newModules = [...this.state.modules];\n      \n    //   // newModules.forEach(module => {\n    //   //   if (module._id === updatedModule._id) {\n    //   //     module.title = newTitle;\n    //   //   }\n    //   // });\n\n    // }\n\n    render() {\n        return (\n          <div>\n            <ul className=\"list-group wbdv-module-list\">\n                {this.state.modules && this.state.modules.map(module =>\n                    // // <li className={`list-group-item wbdv-module-item wbdv-module-item-title\n                    // //   ${this.state.selectedModule === module ? 'active' : ''}`}\n                    // //   key={module._id}>\n                    // <li className={`list-group-item wbdv-module-item wbdv-module-item-title\n                    //   ${this.state.selectedModule === module ? 'active' : ''}`}\n                    //   onClick={() => this.toggleSelectedModule(module)} key={module._id}>\n                      \n                    //       {/* {this.state.editingModuleId === module._id <div>\n                    //       <input onChange={(e) => this.updateModuleTitle(e)}\n                    //         value={this.state.module.title}/>\n                    //         <i className=\"fa-2x fa fa-check\"\n                    //         onClick={() => {\n                    //           this.props.updateModule(this.state.module).then(() =>\n                    //           this.setState({editingModuleId: ''}))}}/>\n                    //       </div>} */}\n                    //   {this.state.editingModule !== module &&\n                    //     <div>{module.title}\n                    //       <span className=\"float-right\">\n                    //         <i className=\"fa fa-trash fa-2x\"\n                    //           onClick={() => this.deleteModule(module._id)}/>\n                    //         <i className=\"fa fa-pencil fa-2x\"\n                    //           onClick={() => this.setState({editingModule: module})}/>\n                    //       </span>\n                    //     </div>\n                    //   }\n                    //   {this.state.editingModule === module &&\n                    //     <div>\n                    //       <input type=\"text\"\n                    //       className=\"typing-container\" value={module.title} />\n                          \n                    //       <span className=\"float-right\">\n                    //         <i className=\"fa fa-check fa-2x\"\n                    //           onClick={() => this.saveModule(module)}/>\n                    //       </span>\n                    //     </div>\n                    //   }\n                    // </li>\n\n                    /*\n                    {\n                      isSelected: boolean\n                      module: object\n                      onSelect: closure that selects current module\n                      onDelete: closure that deletes current module\n                      onSave: closure that updates current module and refreshes everything\n                    }\n                    */\n\n                    <ModuleListItem\n                      isSelected={module._id === this.state.selectedModuleId}\n                      module={module}\n                      onSelect={this.onSelect.bind(this, module._id)}\n                      onDelete={this.onDelete.bind(this, module._id)}\n                      onSave={this.onSave.bind(this, module._id)}\n                      />\n                )}\n                </ul>\n                <i className=\"fa fa-plus-circle fa-3x wbdv-add\"\n                  onClick={() => this.addModule()}/>\n            </div>\n        );\n    }\n\n    state = {\n      selectedModuleId: null,\n      modules: [],\n    }\n\n    onSelect(moduleId) {\n      this.setState({selectedModuleId: moduleId});\n    }\n\n    async onDelete(moduleId) {\n      this.setState({selectedModuleId: moduleId});\n      await this.props.deleteModule(moduleId);\n      await this.updateModules();\n    }\n\n    async onSave(moduleId, newModule) {\n      this.setState({selectedModuleId: null});\n      await this.props.updateModule(moduleId, module);\n      await this.updateModules();\n    }\n}\n\nconst stateToPropertyMapper = (state) => {\n    return {\n        modules: state.modules.modules\n    }\n}\n\nconst dispatchToPropertyMapper = (dispatch) => {\n    return {\n        createModule: (courseId) =>\n            service.createModule(courseId, {title: 'New module'})\n            .then(actualModule =>\n                dispatch(createModule(actualModule, courseId))),\n\n        findAllModulesForCourse: (courseId) =>\n            service.findModulesForCourse(courseId)\n            .then(actualModules =>\n                dispatch(findAllModulesForCourse(actualModules))),\n        \n        // TODO: Instead of first getting the modules for course then dispatching the list of modules,\n        // you should instead dispatch something like this:\n        // dispatch({ type: SET_SELECTED_COURSE, courseId: courseId })\n\n        updateModule: (moduleId, module) =>\n            service.updateModule(moduleId, module)\n            .then(updatedModule =>\n                dispatch(updateModule(updatedModule))),\n\n        deleteModule: (moduleId) =>\n            service.deleteModule(moduleId)\n            .then(status =>\n                dispatch(deleteModule(moduleId)))\n    }\n}\n\nexport default connect(\n    stateToPropertyMapper,\n    dispatchToPropertyMapper)\n(ModuleListComponent)"]},"metadata":{},"sourceType":"module"}