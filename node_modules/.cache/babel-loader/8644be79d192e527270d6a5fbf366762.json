{"ast":null,"code":"var _jsxFileName = \"/Users/mocaa7/src/mocaa7/cs5610/wbdv-sp-20-mocaa7-client-react/src/components/CourseEditor/Widgets/WidgetListComponent.js\";\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport '../../../../node_modules/bootstrap/dist/css/bootstrap.css';\nimport '../../../../node_modules/font-awesome/css/font-awesome.min.css';\nimport '../../CourseEditor/CourseEditor.css';\nimport { createWidget, deleteWidget, findAllWidgetsForTopic, updateWidget, saveAllWidgets, moveWidgetUp, moveWidgetDown } from '../../../actions/widgetActions';\nimport WidgetListItemComponent from './WidgetListItemComponent';\nimport SaveAndPreviewComponent from './SaveAndPreviewComponent';\nimport WidgetService from '../../../services/WidgetService';\nconst service = new WidgetService(); // TODO: to solve - how can you update the changes of the widget to render\n// without saving it to the server (unless save all is pressed?)\n\nclass WidgetListComponent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      topWidget: null,\n      bottomWidget: null,\n      widgets: [],\n      lastElem: 0\n    };\n    this.setState({\n      lastElem: this.state.widgets.length - 1\n    }); // TODO: check if this only works when server is refreshed\n\n    this.updateWidgets();\n  } // TODO: check if correct (goes through all widgets and updates to server)\n\n\n  onSaveAll() {\n    this.props.saveAllWidgets(this.state.widgets, this.props.topicId);\n  }\n\n  async updateWidgets() {\n    const widgets = await service.findWidgetsForTopic(this.props.topicId);\n    this.setState({\n      widgets: widgets\n    });\n  }\n\n  async addWidget() {\n    await this.props.createWidget(this.props.topicId);\n    await this.updateWidgets();\n  }\n\n  async onDelete(widgetId) {\n    await this.props.deleteWidget(widgetId);\n    await this.updateWidgets();\n  } //           var index = state.widgets.indexOf(action.widget);\n  // state.widgets.swap(index, index - 1);\n\n\n  moveUp(widget) {\n    var index = state.widgets.indexOf(widget);\n    this.props.moveWidgetUp(widget);\n  } // Array.prototype.swap = function (x, y) {\n  //   var b = this[x];\n  //   this[x] = this[y];\n  //   this[y] = b;\n  //   this[x].index = y;\n  //   this[y].index = x;\n  //   return this;\n  // }\n\n\n  moveDown(widget) {\n    this.props.moveWidgetDown(widget);\n  } //TODO: is this how we update one widget?\n  // we need to pass update to each item\n\n\n  updateOneWidget(newWidget) {\n    this.state.widgets.forEach(widget => {\n      if (widget._id === newWidget._id) {\n        return newWidget;\n      }\n    });\n  }\n\n  render() {\n    return React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94\n      },\n      __self: this\n    }, React.createElement(SaveAndPreviewComponent, {\n      saveAll: this.onSaveAll.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    }, this.state.widgets && this.state.widgets.map((widget, index) => React.createElement(WidgetListItemComponent, {\n      key: widget._id,\n      index: index,\n      lastElem: this.state.lastElem,\n      widget: widget,\n      moveUp: this.moveUp.bind(),\n      onDelete: this.onDelete.bind(this),\n      updateWidget: this.props.updateWidget // TODO: remove this later on\n      ,\n      moveUp: this.moveUp.bind(this),\n      moveDown: this.moveDown.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"nav-item\",\n      onClick: () => this.addWidget(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114\n      },\n      __self: this\n    }, React.createElement(\"i\", {\n      className: \"nav-link fa fa-plus-circle fa-2x\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115\n      },\n      __self: this\n    }))));\n  }\n\n}\n\nconst stateToPropertyMapper = state => {\n  return {\n    widgets: state.widgets.widgets\n  };\n};\n\nconst dispatchToPropertyMapper = dispatch => {\n  return {\n    createWidget: topicId => service.createWidget(topicId, {\n      type: 'New widget',\n      widgetType: 'Heading'\n    }).then(actualWidget => dispatch(createWidget(actualWidget, topicId))),\n    findAllWidgetsForTopic: topicId => service.findWidgetsForTopic(topicId).then(actualWidgets => dispatch(findAllWidgetsForTopic(actualWidgets))),\n    updateWidget: (widgetId, widget) => service.updateWidget(widgetId, widget).then(updatedWidget => dispatch(updateWidget(updatedWidget))),\n    deleteWidget: widgetId => service.deleteWidget(widgetId).then(status => dispatch(deleteWidget(widgetId))),\n    saveAllWidgets: (topicId, widgets) => service.saveAllWidgets(topicId, widgets).then(returnedWidgets => dispatch(saveAllWidgets(returnedWidgets))),\n    moveWidgetUp: widget => dispatch(moveWidgetUp(widget)),\n    moveWidgetDown: widget => dispatch(moveWidgetDown(widget))\n  };\n};\n\nexport default connect(stateToPropertyMapper, dispatchToPropertyMapper)(WidgetListComponent);","map":{"version":3,"sources":["/Users/mocaa7/src/mocaa7/cs5610/wbdv-sp-20-mocaa7-client-react/src/components/CourseEditor/Widgets/WidgetListComponent.js"],"names":["React","connect","createWidget","deleteWidget","findAllWidgetsForTopic","updateWidget","saveAllWidgets","moveWidgetUp","moveWidgetDown","WidgetListItemComponent","SaveAndPreviewComponent","WidgetService","service","WidgetListComponent","Component","constructor","props","state","topWidget","bottomWidget","widgets","lastElem","setState","length","updateWidgets","onSaveAll","topicId","findWidgetsForTopic","addWidget","onDelete","widgetId","moveUp","widget","index","indexOf","moveDown","updateOneWidget","newWidget","forEach","_id","render","bind","map","stateToPropertyMapper","dispatchToPropertyMapper","dispatch","type","widgetType","then","actualWidget","actualWidgets","updatedWidget","status","returnedWidgets"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport {connect} from \"react-redux\";\nimport '../../../../node_modules/bootstrap/dist/css/bootstrap.css'\nimport '../../../../node_modules/font-awesome/css/font-awesome.min.css';\nimport '../../CourseEditor/CourseEditor.css'\nimport {\n  createWidget,\n  deleteWidget,\n  findAllWidgetsForTopic,\n  updateWidget,\n  saveAllWidgets,\n  moveWidgetUp,\n  moveWidgetDown\n} from '../../../actions/widgetActions'\nimport WidgetListItemComponent from './WidgetListItemComponent';\nimport SaveAndPreviewComponent from './SaveAndPreviewComponent';\nimport WidgetService from '../../../services/WidgetService'\n\nconst service = new WidgetService();\n\n\n// TODO: to solve - how can you update the changes of the widget to render\n// without saving it to the server (unless save all is pressed?)\nclass WidgetListComponent extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      topWidget: null,\n      bottomWidget: null,\n      widgets: [],\n      lastElem: 0\n    };\n    this.setState({lastElem: this.state.widgets.length - 1});\n    // TODO: check if this only works when server is refreshed\n    this.updateWidgets()\n  }\n\n  // TODO: check if correct (goes through all widgets and updates to server)\n  onSaveAll() {\n    this.props.saveAllWidgets(this.state.widgets, this.props.topicId);\n  }\n\n  async updateWidgets() {\n    const widgets = await service.findWidgetsForTopic(this.props.topicId);\n    this.setState({widgets: widgets});\n  }\n\n  async addWidget() {\n    await this.props.createWidget(this.props.topicId);\n    await this.updateWidgets();\n  }\n\n  async onDelete(widgetId) {\n    await this.props.deleteWidget(widgetId);\n    await this.updateWidgets();\n  }\n//           var index = state.widgets.indexOf(action.widget);\n// state.widgets.swap(index, index - 1);\n  moveUp(widget) {\n    var index = state.widgets.indexOf(widget);\n    \n    \n    this.props.moveWidgetUp(widget);\n  }\n\n// Array.prototype.swap = function (x, y) {\n//   var b = this[x];\n//   this[x] = this[y];\n//   this[y] = b;\n\n//   this[x].index = y;\n//   this[y].index = x;\n//   return this;\n// }\n\n  moveDown(widget) {\n    this.props.moveWidgetDown(widget);\n  }\n\n  //TODO: is this how we update one widget?\n  // we need to pass update to each item\n  updateOneWidget(newWidget) {\n    this.state.widgets.forEach(widget => {\n      if(widget._id === newWidget._id) {\n        return newWidget;\n      }\n    });\n  }\n\n\n  render() {\n    return (\n        <span>\n          <SaveAndPreviewComponent\n              saveAll={this.onSaveAll.bind(this)}/>\n          <div>\n            {this.state.widgets && this.state.widgets.map((widget, index) =>\n                <WidgetListItemComponent\n                    key={widget._id}\n                    \n                    index={index}\n                    lastElem={this.state.lastElem}\n\n                    widget={widget}\n\n                    moveUp={this.moveUp.bind()}\n                    onDelete={this.onDelete.bind(this)}\n                    updateWidget={this.props.updateWidget} // TODO: remove this later on\n                    moveUp={this.moveUp.bind(this)}\n                    moveDown={this.moveDown.bind(this)}\n                />)\n            }\n            <div className=\"nav-item\" onClick={() => this.addWidget()}>\n              <i className=\"nav-link fa fa-plus-circle fa-2x\"/>\n            </div>\n          </div>\n        </span>\n    )\n  }\n}\n\nconst stateToPropertyMapper = (state) => {\n  return {\n    widgets: state.widgets.widgets\n  }\n};\n\nconst dispatchToPropertyMapper = (dispatch) => {\n  return {\n    createWidget: (topicId) =>\n        service.createWidget(topicId,\n            {type: 'New widget', widgetType: 'Heading'})\n        .then(actualWidget =>\n            dispatch(createWidget(actualWidget, topicId))),\n\n    findAllWidgetsForTopic: (topicId) =>\n        service.findWidgetsForTopic(topicId)\n        .then(actualWidgets =>\n            dispatch(findAllWidgetsForTopic(actualWidgets))),\n\n    updateWidget: (widgetId, widget) =>\n        service.updateWidget(widgetId, widget)\n        .then(updatedWidget =>\n            dispatch(updateWidget(updatedWidget))),\n\n    deleteWidget: (widgetId) =>\n        service.deleteWidget(widgetId)\n        .then(status =>\n            dispatch(deleteWidget(widgetId))),\n    \n    saveAllWidgets: (topicId, widgets) =>\n      service.saveAllWidgets(topicId, widgets)\n      .then(returnedWidgets =>\n        dispatch(saveAllWidgets(returnedWidgets))),\n    \n    moveWidgetUp: (widget) =>\n      dispatch(moveWidgetUp(widget)),\n    \n    moveWidgetDown: (widget) =>\n      dispatch(moveWidgetDown(widget)),\n  }\n};\n\nexport default connect(\n    stateToPropertyMapper,\n    dispatchToPropertyMapper)\n(WidgetListComponent)"]},"metadata":{},"sourceType":"module"}