{"ast":null,"code":"import { CREATE_WIDGET, DELETE_WIDGET, UPDATE_WIDGET, FIND_WIDGETS_FOR_TOPIC } from '../actions/widgetActions';\nconst initialState = {\n  widgets: []\n};\n\nconst widgetReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case FIND_WIDGETS_FOR_TOPIC:\n      return {\n        widgets: action.widgets\n      };\n\n    case CREATE_WIDGET:\n      return {\n        widgets: [...state.widgets, action.newWidget]\n      };\n\n    case DELETE_WIDGET:\n      return {\n        widgets: state.widgets.filter(widget => widget._id !== action.widgetId)\n      };\n\n    case UPDATE_WIDGET:\n      return {\n        widgets: state.widgets.map(widget => widget._id === action.widgetId ? action.widget : widget)\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default widgetReducer;","map":{"version":3,"sources":["/Users/mocaa7/src/mocaa7/cs5610/wbdv-sp-20-mocaa7-client-react/src/reducers/widgetReducer.js"],"names":["CREATE_WIDGET","DELETE_WIDGET","UPDATE_WIDGET","FIND_WIDGETS_FOR_TOPIC","initialState","widgets","widgetReducer","state","action","type","newWidget","filter","widget","_id","widgetId","map"],"mappings":"AAAA,SACIA,aADJ,EAEIC,aAFJ,EAGIC,aAHJ,EAIIC,sBAJJ,QAKO,0BALP;AAOA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,OAAO,EAAE;AADQ,CAArB;;AAIA,MAAMC,aAAa,GAAG,CAACC,KAAK,GAAGH,YAAT,EAAuBI,MAAvB,KAAkC;AACpD,UAAOA,MAAM,CAACC,IAAd;AACI,SAAKN,sBAAL;AACE,aAAO;AAACE,QAAAA,OAAO,EAAEG,MAAM,CAACH;AAAjB,OAAP;;AACF,SAAKL,aAAL;AACE,aAAO;AAACK,QAAAA,OAAO,EAAE,CAAC,GAAGE,KAAK,CAACF,OAAV,EAAmBG,MAAM,CAACE,SAA1B;AAAV,OAAP;;AACF,SAAKT,aAAL;AACE,aAAO;AAACI,QAAAA,OAAO,EAAEE,KAAK,CAACF,OAAN,CAAcM,MAAd,CAAqBC,MAAM,IAAIA,MAAM,CAACC,GAAP,KAAeL,MAAM,CAACM,QAArD;AAAV,OAAP;;AACF,SAAKZ,aAAL;AACE,aAAO;AAACG,QAAAA,OAAO,EAAEE,KAAK,CAACF,OAAN,CAAcU,GAAd,CAAkBH,MAAM,IACvCA,MAAM,CAACC,GAAP,KAAeL,MAAM,CAACM,QAAtB,GAAiCN,MAAM,CAACI,MAAxC,GAAiDA,MADlC;AAAV,OAAP;;AAEF;AACE,aAAOL,KAAP;AAXN;AAaH,CAdD;;AAgBA,eAAeD,aAAf","sourcesContent":["import {\n    CREATE_WIDGET,\n    DELETE_WIDGET,\n    UPDATE_WIDGET,\n    FIND_WIDGETS_FOR_TOPIC\n} from '../actions/widgetActions';\n\nconst initialState = {\n    widgets: []\n};\n\nconst widgetReducer = (state = initialState, action) => {\n    switch(action.type) {\n        case FIND_WIDGETS_FOR_TOPIC:\n          return {widgets: action.widgets};\n        case CREATE_WIDGET:\n          return {widgets: [...state.widgets, action.newWidget]};\n        case DELETE_WIDGET:\n          return {widgets: state.widgets.filter(widget => widget._id !== action.widgetId)};\n        case UPDATE_WIDGET:\n          return {widgets: state.widgets.map(widget =>\n            widget._id === action.widgetId ? action.widget : widget)};\n        default:\n          return state\n      }\n};\n\nexport default widgetReducer;"]},"metadata":{},"sourceType":"module"}