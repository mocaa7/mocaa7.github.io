{"ast":null,"code":"var _jsxFileName = \"/Users/mocaa7/src/mocaa7/cs5610/wbdv-sp-20-mocaa7-client-react/src/components/CourseEditor/Widgets/WidgetListComponent.js\";\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport '../../../../node_modules/bootstrap/dist/css/bootstrap.css';\nimport '../../../../node_modules/font-awesome/css/font-awesome.min.css';\nimport '../../CourseEditor/CourseEditor.css';\nimport { createWidget, deleteWidget, findAllWidgetsForTopic, updateWidget, saveAllWidgets, moveWidgetUp, moveWidgetDown } from '../../../actions/widgetActions';\nimport WidgetListItemComponent from './WidgetListItemComponent';\nimport SaveAndPreviewComponent from './SaveAndPreviewComponent';\nimport WidgetService from '../../../services/WidgetService';\nconst service = new WidgetService(); // TODO: to solve - how can you update the changes of the widget to render\n// without saving it to the server (unless save all is pressed?)\n\nclass WidgetListComponent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      topWidget: null,\n      bottomWidget: null,\n      widgets: []\n    }; // this.updateWidgets()\n  }\n\n  componentDidMount() {\n    this.updateWidgets();\n  } // TODO: check if correct (goes through all widgets and updates to server)\n\n\n  onSaveAll() {\n    this.props.saveAllWidgets(this.state.widgets, this.props.topicId);\n  }\n\n  getLastElement() {\n    return this.state.widgets.length - 1;\n  }\n\n  async updateWidgets() {\n    const widgets = await service.findWidgetsForTopic(this.props.topicId);\n    this.setState({\n      widgets: widgets\n    });\n  }\n\n  async addWidget() {\n    // TODO: learn how to use save all for later - currentl this is all done on the server\n    const newWidget = await this.props.createWidget(this.props.topicId);\n    await this.updateWidgets();\n  }\n\n  async onDelete(widgetId) {\n    await this.props.deleteWidget(widgetId);\n    await this.updateWidgets();\n  }\n\n  swapElements(widgets, x, y) {\n    var temp = widgets[x];\n    widgets[x] = widgets[y];\n    widgets[y] = temp;\n    widgets[x].index = x;\n    widgets[y].index = y;\n    return widgets;\n  } // TODO: check if you need to manipulate the state or if this is enough passing the props\n\n\n  moveUp(widget) {\n    // var index = this.state.widgets.indexOf(widget);\n    // this.setState({widgets: this.swapElements(this.state.widgets, index, index - 1)});\n    // widget.index = this.state.widgets.indexOf(widget);\n    this.props.moveWidgetUp(widget);\n    this.updateWidgets(); // TODO: delete this\n  }\n\n  moveDown(widget) {\n    // var index = this.state.widgets.indexOf(widget);\n    // this.setState({widgets: this.swapElements(this.state.widgets, index, index + 1)});\n    // widget.index = this.state.widgets.indexOf(widget);\n    this.props.moveWidgetDown(widget);\n    this.updateWidgets(); // TODO: delete this\n  } //TODO: is this how we update one widget?\n  // we need to pass update to each item\n\n\n  updateOneWidget(newWidget) {\n    this.state.widgets.forEach(widget => {\n      if (widget._id === newWidget._id) {\n        return newWidget;\n      }\n    });\n  }\n\n  render() {\n    return React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111\n      },\n      __self: this\n    }, JSON.stringify(this.state.widgets)), React.createElement(SaveAndPreviewComponent, {\n      saveAll: this.onSaveAll.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115\n      },\n      __self: this\n    }, this.state.widgets && this.state.widgets.map((widget, index) => React.createElement(WidgetListItemComponent, {\n      key: widget._id,\n      index: index,\n      getLastElement: this.getLastElement.bind(this),\n      widget: widget,\n      moveUp: this.props.moveWidgetUp,\n      moveDown: this.props.moveWidgetDown,\n      onDelete: this.onDelete.bind(this),\n      updateWidget: this.props.updateWidget // TODO: remove this later on\n      ,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"nav-item\",\n      onClick: () => this.addWidget(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130\n      },\n      __self: this\n    }, React.createElement(\"i\", {\n      className: \"nav-link fa fa-plus-circle fa-2x\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131\n      },\n      __self: this\n    }))));\n  }\n\n}\n\nconst stateToPropertyMapper = state => {\n  return {\n    widgets: state.widgets.widgets\n  };\n};\n\nconst dispatchToPropertyMapper = dispatch => {\n  return {\n    createWidget: topicId => service.createWidget(topicId, {\n      name: 'New widget',\n      widgetType: 'Heading'\n    }).then(actualWidget => dispatch(createWidget(actualWidget, topicId))),\n    findAllWidgetsForTopic: topicId => service.findWidgetsForTopic(topicId).then(actualWidgets => dispatch(findAllWidgetsForTopic(actualWidgets))),\n    updateWidget: (widgetId, widget) => service.updateWidget(widgetId, widget).then(updatedWidget => dispatch(updateWidget(updatedWidget))),\n    deleteWidget: widgetId => service.deleteWidget(widgetId).then(status => dispatch(deleteWidget(widgetId))),\n    saveAllWidgets: (topicId, widgets) => service.saveAllWidgets(topicId, widgets).then(returnedWidgets => dispatch(saveAllWidgets(returnedWidgets))),\n    moveWidgetUp: widget => dispatch(moveWidgetUp(widget)),\n    moveWidgetDown: widget => dispatch(moveWidgetDown(widget))\n  };\n};\n\nexport default connect(stateToPropertyMapper, dispatchToPropertyMapper)(WidgetListComponent);","map":{"version":3,"sources":["/Users/mocaa7/src/mocaa7/cs5610/wbdv-sp-20-mocaa7-client-react/src/components/CourseEditor/Widgets/WidgetListComponent.js"],"names":["React","connect","createWidget","deleteWidget","findAllWidgetsForTopic","updateWidget","saveAllWidgets","moveWidgetUp","moveWidgetDown","WidgetListItemComponent","SaveAndPreviewComponent","WidgetService","service","WidgetListComponent","Component","constructor","props","state","topWidget","bottomWidget","widgets","componentDidMount","updateWidgets","onSaveAll","topicId","getLastElement","length","findWidgetsForTopic","setState","addWidget","newWidget","onDelete","widgetId","swapElements","x","y","temp","index","moveUp","widget","moveDown","updateOneWidget","forEach","_id","render","JSON","stringify","bind","map","stateToPropertyMapper","dispatchToPropertyMapper","dispatch","name","widgetType","then","actualWidget","actualWidgets","updatedWidget","status","returnedWidgets"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { connect } from \"react-redux\";\nimport '../../../../node_modules/bootstrap/dist/css/bootstrap.css'\nimport '../../../../node_modules/font-awesome/css/font-awesome.min.css';\nimport '../../CourseEditor/CourseEditor.css'\nimport {\n  createWidget,\n  deleteWidget,\n  findAllWidgetsForTopic,\n  updateWidget,\n  saveAllWidgets,\n  moveWidgetUp,\n  moveWidgetDown\n} from '../../../actions/widgetActions'\nimport WidgetListItemComponent from './WidgetListItemComponent';\nimport SaveAndPreviewComponent from './SaveAndPreviewComponent';\nimport WidgetService from '../../../services/WidgetService'\n\nconst service = new WidgetService();\n\n\n// TODO: to solve - how can you update the changes of the widget to render\n// without saving it to the server (unless save all is pressed?)\nclass WidgetListComponent extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      topWidget: null,\n      bottomWidget: null,\n      widgets: [],\n    };\n    // this.updateWidgets()\n  }\n\n  componentDidMount() {\n    this.updateWidgets();\n  }\n\n  // TODO: check if correct (goes through all widgets and updates to server)\n  onSaveAll() {\n    this.props.saveAllWidgets(this.state.widgets, this.props.topicId);\n  }\n\n  getLastElement() {\n    return this.state.widgets.length - 1;\n  }\n\n  async updateWidgets() {\n    const widgets = await service.findWidgetsForTopic(this.props.topicId);\n    this.setState({ widgets: widgets });\n  }\n\n  async addWidget() {\n    // TODO: learn how to use save all for later - currentl this is all done on the server\n    const newWidget = await this.props.createWidget(this.props.topicId);\n    await this.updateWidgets();\n\n  }\n\n  async onDelete(widgetId) {\n    await this.props.deleteWidget(widgetId);\n    await this.updateWidgets();\n  }\n\n  swapElements(widgets, x, y) {\n    var temp = widgets[x];\n    widgets[x] = widgets[y];\n    widgets[y] = temp;\n\n    widgets[x].index = x;\n    widgets[y].index = y;\n\n    return widgets;\n  }\n\n  // TODO: check if you need to manipulate the state or if this is enough passing the props\n  moveUp(widget) {\n    // var index = this.state.widgets.indexOf(widget);\n    // this.setState({widgets: this.swapElements(this.state.widgets, index, index - 1)});\n    \n    // widget.index = this.state.widgets.indexOf(widget);\n    this.props.moveWidgetUp(widget);\n    this.updateWidgets(); // TODO: delete this\n  }\n  \n  moveDown(widget) {\n    // var index = this.state.widgets.indexOf(widget);\n    // this.setState({widgets: this.swapElements(this.state.widgets, index, index + 1)});\n    \n    // widget.index = this.state.widgets.indexOf(widget);\n    this.props.moveWidgetDown(widget);\n    this.updateWidgets(); // TODO: delete this\n  }\n\n  //TODO: is this how we update one widget?\n  // we need to pass update to each item\n  updateOneWidget(newWidget) {\n    this.state.widgets.forEach(widget => {\n      if (widget._id === newWidget._id) {\n        return newWidget;\n      }\n    });\n  }\n\n\n  render() {\n    return (\n      <span>\n        {/* TODO: do not forget to remove this */}\n        <div>{JSON.stringify(this.state.widgets)}</div>\n\n        <SaveAndPreviewComponent\n          saveAll={this.onSaveAll.bind(this)} />\n        <div>\n          {this.state.widgets && this.state.widgets.map((widget, index) =>\n            <WidgetListItemComponent\n              key={widget._id}\n              index={index}\n              getLastElement={this.getLastElement.bind(this)}\n              widget={widget}\n\n              moveUp={this.props.moveWidgetUp}\n              moveDown={this.props.moveWidgetDown}\n\n              onDelete={this.onDelete.bind(this)}\n              updateWidget={this.props.updateWidget} // TODO: remove this later on\n            />)\n          }\n          <div className=\"nav-item\" onClick={() => this.addWidget()}>\n            <i className=\"nav-link fa fa-plus-circle fa-2x\" />\n          </div>\n        </div>\n      </span>\n    )\n  }\n}\n\nconst stateToPropertyMapper = (state) => {\n  return {\n    widgets: state.widgets.widgets\n  }\n};\n\nconst dispatchToPropertyMapper = (dispatch) => {\n  return {\n    createWidget: (topicId) =>\n      service.createWidget(topicId,\n        {name: 'New widget', widgetType: 'Heading'})\n        .then(actualWidget =>\n          dispatch(createWidget(actualWidget, topicId))),\n\n    findAllWidgetsForTopic: (topicId) =>\n      service.findWidgetsForTopic(topicId)\n        .then(actualWidgets =>\n          dispatch(findAllWidgetsForTopic(actualWidgets))),\n\n    updateWidget: (widgetId, widget) =>\n      service.updateWidget(widgetId, widget)\n        .then(updatedWidget =>\n          dispatch(updateWidget(updatedWidget))),\n\n    deleteWidget: (widgetId) =>\n      service.deleteWidget(widgetId)\n        .then(status =>\n          dispatch(deleteWidget(widgetId))),\n\n    saveAllWidgets: (topicId, widgets) =>\n      service.saveAllWidgets(topicId, widgets)\n        .then(returnedWidgets =>\n          dispatch(saveAllWidgets(returnedWidgets))),\n\n    moveWidgetUp: (widget) =>\n      dispatch(moveWidgetUp(widget)),\n\n    moveWidgetDown: (widget) =>\n      dispatch(moveWidgetDown(widget)),\n  }\n};\n\nexport default connect(\n  stateToPropertyMapper,\n  dispatchToPropertyMapper)\n  (WidgetListComponent)"]},"metadata":{},"sourceType":"module"}