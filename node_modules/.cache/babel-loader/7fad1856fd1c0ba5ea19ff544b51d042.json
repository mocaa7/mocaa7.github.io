{"ast":null,"code":"var _jsxFileName = \"/Users/mocaa7/src/mocaa7/cs5610/wbdv-sp-20-mocaa7-client-react/src/containers/CourseManagerContainer.js\";\nimport React from 'react';\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport '../../node_modules/bootstrap/dist/css/bootstrap.css';\nimport '../../node_modules/font-awesome/css/font-awesome.min.css';\nimport '../components/CourseManager/CourseManager.css';\nimport CourseService from \"../services/CourseService\";\nimport CourseEditorComponentStateful from '../components/CourseEditor/CourseEditorComponentStateful';\nimport CourseListComponent from '../components/CourseManager/CourseListComponent.js';\nconst service = new CourseService();\n\nclass CourseManagerContainer extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      layout: 'table',\n      editingCourse: false,\n      newCourseTitle: 'New Course',\n      courses: []\n    };\n\n    this.componentDidMount = async () => {\n      const allCourses = await service.findAllCourses();\n      this.setState({\n        courses: allCourses\n      });\n    };\n\n    this.deleteCourse = async deletedCourse => {\n      const status = await service.deleteCourse(deletedCourse._id);\n      const courses = await service.findAllCourses();\n      this.setState({\n        courses: courses\n      });\n    };\n\n    this.addCourse = async () => {\n      debugger;\n      await service.createCourse({\n        title: this.state.newCourseTitle\n      });\n      const actual = await service.findAllCourses();\n      this.setState({\n        courses: actual\n      });\n    };\n\n    this.toggle = () => {\n      this.setState(prevState => ({\n        layout: prevState.layout === 'grid' ? 'table' : 'grid'\n      }));\n    };\n\n    this.updateFormState = event => {\n      console.log(event.target.value);\n      this.setState({\n        newCourseTitle: event.target.value\n      });\n    };\n\n    this.editCourse = course => {\n      this.setState(prevState => ({\n        courses: prevState.courses.map(c => {\n          c.editing = false;\n          c.editing = c._id === course._id;\n          return c;\n        })\n      }));\n    };\n\n    this.showCourseEditor = () => this.setState({\n      editingCourse: true\n    });\n\n    this.hideCourseEditor = () => this.setState({\n      editingCourse: false\n    });\n\n    this.getAllCourses = () => service.findAllCourses().then(storedCourses => this.setState({\n      courses: storedCourses\n    }));\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"container-fluid\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115\n      },\n      __self: this\n    }, React.createElement(Router, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122\n      },\n      __self: this\n    }, React.createElement(Route, {\n      path: \"/course/:courseId\",\n      exact: true,\n      render: props => React.createElement(CourseEditorComponentStateful, Object.assign({}, props, {\n        courseId: props.match.params.courseId,\n        hideCourseEditor: this.hideCourseEditor,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 127\n        },\n        __self: this\n      })),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    }), React.createElement(Route, {\n      path: \"/course/:courseId/module/:moduleId\",\n      exact: true,\n      render: props => React.createElement(CourseEditorComponentStateful, Object.assign({}, props, {\n        moduleId: props.match.params.moduleId,\n        courseId: props.match.params.courseId,\n        hideCourseEditor: this.hideCourseEditor,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 136\n        },\n        __self: this\n      })),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132\n      },\n      __self: this\n    }), React.createElement(Route, {\n      path: \"/course/:courseId/module/:moduleId/lesson/:lessonId\",\n      exact: true,\n      render: props => React.createElement(CourseEditorComponentStateful, Object.assign({}, props, {\n        lessonId: props.match.params.lessonId,\n        moduleId: props.match.params.moduleId,\n        courseId: props.match.params.courseId,\n        hideCourseEditor: this.hideCourseEditor,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 146\n        },\n        __self: this\n      })),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142\n      },\n      __self: this\n    }), React.createElement(Route, {\n      path: \"/course/:courseId/module/:moduleId/lesson/:lessonId/topic/:topicId\",\n      exact: true,\n      render: props => React.createElement(CourseEditorComponentStateful, Object.assign({}, props, {\n        topicId: props.match.params.topicId,\n        lessonId: props.match.params.lessonId,\n        moduleId: props.match.params.moduleId,\n        courseId: props.match.params.courseId,\n        hideCourseEditor: this.hideCourseEditor,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 157\n        },\n        __self: this\n      })),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153\n      },\n      __self: this\n    }), React.createElement(Route, {\n      path: \"/\",\n      exact: true,\n      render: () => React.createElement(CourseListComponent, {\n        layout: this.state.layout,\n        updateFormState: this.updateFormState,\n        addCourse: this.addCourse,\n        toggle: this.toggle,\n        courses: this.state.courses,\n        showCourseEditor: this.showCourseEditor,\n        hideCourseEditor: this.hideCourseEditor,\n        deleteCourse: this.deleteCourse,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 169\n        },\n        __self: this\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165\n      },\n      __self: this\n    })));\n  }\n\n}\n\nexport default CourseManagerContainer;","map":{"version":3,"sources":["/Users/mocaa7/src/mocaa7/cs5610/wbdv-sp-20-mocaa7-client-react/src/containers/CourseManagerContainer.js"],"names":["React","BrowserRouter","Router","Route","CourseService","CourseEditorComponentStateful","CourseListComponent","service","CourseManagerContainer","Component","state","layout","editingCourse","newCourseTitle","courses","componentDidMount","allCourses","findAllCourses","setState","deleteCourse","deletedCourse","status","_id","addCourse","createCourse","title","actual","toggle","prevState","updateFormState","event","console","log","target","value","editCourse","course","map","c","editing","showCourseEditor","hideCourseEditor","getAllCourses","then","storedCourses","render","props","match","params","courseId","moduleId","lessonId","topicId"],"mappings":"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","sourcesContent":["import React from 'react'\nimport {BrowserRouter as Router, Route} from \"react-router-dom\";\nimport '../../node_modules/bootstrap/dist/css/bootstrap.css'\nimport '../../node_modules/font-awesome/css/font-awesome.min.css';\nimport '../components/CourseManager/CourseManager.css'\nimport CourseService from \"../services/CourseService\";\nimport CourseEditorComponentStateful from '../components/CourseEditor/CourseEditorComponentStateful';\nimport CourseListComponent from '../components/CourseManager/CourseListComponent.js';\n\nconst service = new CourseService();\n\nclass CourseManagerContainer extends React.Component {\n  \n  state = {\n    layout: 'table',\n    editingCourse: false,\n    newCourseTitle: 'New Course',\n    courses: []\n  };\n\n  componentDidMount = async () => {\n    const allCourses = await service.findAllCourses();\n    this.setState({courses: allCourses})\n  };\n\n  deleteCourse = async (deletedCourse) => {\n    const status = await service.deleteCourse(deletedCourse._id);\n    const courses = await service.findAllCourses();\n    this.setState({courses: courses})\n  };\n\n  /**\n   * creates a course on the server with the newCourse title as per current\n   * state on the page, then gets all the courses from the server, and sets\n   * the state (updates the current state and renders it)\n   */\n  addCourse = async () => {\n    debugger;\n    await service.createCourse({title: this.state.newCourseTitle});\n    const actual = await service.findAllCourses();\n    this.setState({courses: actual});\n  }\n\n  /**\n   * When clicked on the toggle button, then this function executes.\n   * If currently grid, change to table, and vice versa.\n   */\n  toggle = () => {\n    this.setState(prevState => ({\n      layout: prevState.layout === 'grid' ? 'table': 'grid'\n    }))\n  };\n\n  /**\n   * When clicking saveCourse button:\n   * updates the title of the course (as done in the function below).\n   * TODO: DELETE BELOW\n   * Then shows the title as text, hides the save course button, and shows the\n   * delete and edit buttons again\n   */\n  updateFormState = (event) => {\n    console.log(event.target.value);\n    this.setState({newCourseTitle: event.target.value});\n  };\n\n  /**\n   * when clicking on the pencil on the row of a given course\n   * shows the title in an input field, hides the delete and edit button,\n   * shows the save course button\n   * TODO: CHECK IF THIS IS REALLY NEEDED\n   */\n  editCourse = (course) => {\n    this.setState(prevState => ({\n      courses: prevState.courses.map(c => {\n        c.editing = false;\n        c.editing = (c._id === course._id);\n        return c\n      })}))\n  };\n\n  showCourseEditor = () =>\n      this.setState({\n        editingCourse: true\n      });\n\n  hideCourseEditor = () =>\n      this.setState({\n        editingCourse: false\n      });\n\n  // updateCourseTitle = (courseToUpdate) => {\n  //   service.updateCourse(courseToUpdate._id, courseToUpdate)\n  //   .then(status => service.findAllCourses())\n  //   .then(courses => this.setState({courses: courses}));\n  // };\n\n  // this.setState(prevState => ({\n  //   courses: prevState.courses.filter(course => course._id !== deletedCourse._id)\n  // }))\n  // saveCourseTitle = (course) => {\n  //   this.setState(prevState => ({\n  //     courses: prevState.courses.map(c => {\n  //       if (c._id === course._id) {\n  //         c.title = course.title;\n  //       }})}))\n  // };\n\n  getAllCourses = () =>\n    service.findAllCourses().then(\n        storedCourses => this.setState({courses: storedCourses})\n    );\n\n  render() {\n    return (\n        <div className=\"container-fluid\">\n          {/* <CourseHeadingComponent/>\n          <CourseSearchAndToggleComponent\n            layout={this.layout}\n            updateFormState = {this.updateFormState}\n            addCourse = {this.addCourse}\n            toggle = {this.toggle}/> */}\n          <Router>\n            <Route\n                path=\"/course/:courseId\"\n                exact={true}\n                render={(props) =>\n                    <CourseEditorComponentStateful\n                      {...props}\n                      courseId={props.match.params.courseId}\n                      hideCourseEditor={this.hideCourseEditor}/>\n                }/>\n            <Route\n                path=\"/course/:courseId/module/:moduleId\"\n                exact={true}\n                render={(props) =>\n                    <CourseEditorComponentStateful\n                        {...props}\n                        moduleId={props.match.params.moduleId}\n                        courseId={props.match.params.courseId}\n                        hideCourseEditor={this.hideCourseEditor}/>\n                }/>\n            <Route\n                path=\"/course/:courseId/module/:moduleId/lesson/:lessonId\"\n                exact={true}\n                render={(props) =>\n                    <CourseEditorComponentStateful\n                        {...props}\n                        lessonId={props.match.params.lessonId}\n                        moduleId={props.match.params.moduleId}\n                        courseId={props.match.params.courseId}\n                        hideCourseEditor={this.hideCourseEditor}/>\n                }/>\n            <Route\n                path=\"/course/:courseId/module/:moduleId/lesson/:lessonId/topic/:topicId\"\n                exact={true}\n                render={(props) =>\n                    <CourseEditorComponentStateful\n                        {...props}\n                        topicId={props.match.params.topicId}\n                        lessonId={props.match.params.lessonId}\n                        moduleId={props.match.params.moduleId}\n                        courseId={props.match.params.courseId}\n                        hideCourseEditor={this.hideCourseEditor}/>\n                }/>\n            <Route\n                path=\"/\"\n                exact={true}\n                render={() =>\n                  <CourseListComponent\n                      layout={this.state.layout}\n                      updateFormState = {this.updateFormState}\n                      addCourse = {this.addCourse}\n                      toggle = {this.toggle}\n                      courses={this.state.courses}\n                      showCourseEditor={this.showCourseEditor}\n                      hideCourseEditor={this.hideCourseEditor}\n                      deleteCourse={this.deleteCourse}/>\n                }/>\n          </Router>\n        </div>\n    );\n  }\n}\n\nexport default CourseManagerContainer\n"]},"metadata":{},"sourceType":"module"}