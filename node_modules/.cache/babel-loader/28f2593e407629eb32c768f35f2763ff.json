{"ast":null,"code":"import _toConsumableArray from\"/Users/mocaa7/src/git-website/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import{CREATE_TOPIC,DELETE_TOPIC,UPDATE_TOPIC,FIND_ALL_TOPICS_FOR_LESSON}from\"../actions/topicActions\";var topicReducer=function topicReducer(){var state=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{topics:[]};var action=arguments.length>1?arguments[1]:undefined;switch(action.type){case FIND_ALL_TOPICS_FOR_LESSON:return{topics:action.topics};case CREATE_TOPIC:return{topics:[].concat(_toConsumableArray(state.topics),[action.newTopic])};case DELETE_TOPIC:return{topics:state.topics.filter(function(topic){return topic.id!==action.topicId;})};case UPDATE_TOPIC:return{topics:state.topics.map(function(topic){return topic.id===action.topic.id?action.topic:topic;})};default:return state;}};export default topicReducer;","map":{"version":3,"sources":["/Users/mocaa7/src/git-website/src/reducers/topicReducer.js"],"names":["CREATE_TOPIC","DELETE_TOPIC","UPDATE_TOPIC","FIND_ALL_TOPICS_FOR_LESSON","topicReducer","state","topics","action","type","newTopic","filter","topic","id","topicId","map"],"mappings":"wHAAA,OAAQA,YAAR,CAAsBC,YAAtB,CAAoCC,YAApC,CAAkDC,0BAAlD,KACO,yBADP,CAGA,GAAMC,CAAAA,YAAY,CAAG,QAAfA,CAAAA,YAAe,EAAkC,IAAjCC,CAAAA,KAAiC,2DAAzB,CAACC,MAAM,CAAE,EAAT,CAAyB,IAAXC,CAAAA,MAAW,2CACrD,OAAOA,MAAM,CAACC,IAAd,EACE,IAAKL,CAAAA,0BAAL,CACE,MAAO,CAACG,MAAM,CAAEC,MAAM,CAACD,MAAhB,CAAP,CACF,IAAKN,CAAAA,YAAL,CACE,MAAO,CAACM,MAAM,8BAAMD,KAAK,CAACC,MAAZ,GAAoBC,MAAM,CAACE,QAA3B,EAAP,CAAP,CACF,IAAKR,CAAAA,YAAL,CACE,MAAO,CAACK,MAAM,CAAED,KAAK,CAACC,MAAN,CAAaI,MAAb,CAAoB,SAAAC,KAAK,QAAIA,CAAAA,KAAK,CAACC,EAAN,GAAaL,MAAM,CAACM,OAAxB,EAAzB,CAAT,CAAP,CACF,IAAKX,CAAAA,YAAL,CACE,MAAO,CAACI,MAAM,CAAED,KAAK,CAACC,MAAN,CAAaQ,GAAb,CAAiB,SAAAH,KAAK,QACpCA,CAAAA,KAAK,CAACC,EAAN,GAAaL,MAAM,CAACI,KAAP,CAAaC,EAA1B,CAA+BL,MAAM,CAACI,KAAtC,CAA8CA,KADV,EAAtB,CAAT,CAAP,CAEF,QACE,MAAON,CAAAA,KAAP,CAXJ,CAaD,CAdD,CAgBA,cAAeD,CAAAA,YAAf","sourcesContent":["import {CREATE_TOPIC, DELETE_TOPIC, UPDATE_TOPIC, FIND_ALL_TOPICS_FOR_LESSON}\n  from \"../actions/topicActions\";\n\nconst topicReducer = (state = {topics: []}, action) => {\n  switch(action.type) {\n    case FIND_ALL_TOPICS_FOR_LESSON:\n      return {topics: action.topics};\n    case CREATE_TOPIC:\n      return {topics: [...state.topics, action.newTopic]};\n    case DELETE_TOPIC:\n      return {topics: state.topics.filter(topic => topic.id !== action.topicId)};\n    case UPDATE_TOPIC:\n      return {topics: state.topics.map(topic =>\n        topic.id === action.topic.id ? action.topic : topic)};\n    default:\n      return state\n  }\n};\n\nexport default topicReducer"]},"metadata":{},"sourceType":"module"}