{"ast":null,"code":"var _jsxFileName = \"/Users/mocaa7/src/mocaa7/cs5610/wbdv-sp-20-mocaa7-client-react/src/components/CourseEditor/Modules/ModuleListComponent.js\";\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Link } from 'react-router-dom';\nimport '../../../../node_modules/bootstrap/dist/css/bootstrap.css';\nimport '../../../../node_modules/font-awesome/css/font-awesome.min.css';\nimport '../../CourseEditor/CourseEditor.css';\nimport '../../CourseManager/CourseManager.css';\nimport { createModule, deleteModule, findAllModulesForCourse, updateModule } from '../../../actions/moduleActions';\nimport ModuleService from '../../../services/ModuleService';\nimport ModuleListItem from './ModuleListItem';\nconst service = new ModuleService();\n\nclass ModuleListComponent extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      selectedModule: null,\n      // editingModule: null,\n      modules: []\n    };\n  }\n\n  componentDidMount() {\n    this.updateModules();\n  }\n\n  async updateModules() {\n    const modules = await service.findModulesForCourse(this.props.courseId);\n    this.setState({\n      modules: modules\n    });\n  }\n\n  componentDidUpdate(prevProps, prevState, snapshot) {\n    console.log('componentDidUpdate');\n\n    if (this.props.courseId !== prevProps.courseId) {\n      console.log('course ID or state changed');\n      this.updateModules();\n    }\n  }\n\n  updateModuleTitle(event) {\n    this.setState(prevState => ({\n      module: { ...prevState.module,\n        title: event.target.value\n      }\n    }));\n  }\n\n  // make highlighted, change URL to inclide module,\n  // and render all lessons related to the module\n  toggleSelectedModule(module) {\n    this.props.history.push(`/course/${this.props.courseId}/module/${module._id}`);\n    this.setState({\n      selectedModule: module\n    }); // if (this.state.selectedModule === module) {\n    //   this.props.history.push(`/course/${this.props.courseId}`)\n    //   this.setState({selectedModule: null});\n    // } else {\n    //   this.props.history.push(`/course/${this.props.courseId}/module/${module._id}`)\n    //   this.setState({selectedModule: module});\n    // }\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    }, React.createElement(\"ul\", {\n      className: \"list-group wbdv-module-list\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    }, this.state.modules && this.state.modules.map(module => // <li className={`list-group-item wbdv-module-item wbdv-module-item-title\n    //   ${this.state.selectedModule === module ? 'active' : ''}`}\n    //   key={module._id}>\n    React.createElement(\"li\", {\n      className: `list-group-item wbdv-module-item wbdv-module-item-title\n                      ${this.state.selectedModule === module ? 'active' : ''}`,\n      onClick: () => this.toggleSelectedModule(module),\n      key: module._id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    }, module.title, React.createElement(\"span\", {\n      className: \"float-right\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }, React.createElement(\"i\", {\n      className: \"fa fa-trash fa-2x\",\n      onClick: () => this.props.deleteModule(module._id),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    }), React.createElement(\"i\", {\n      className: \"fa fa-pencil fa-2x\",\n      onClick: () => this.setState(prevState => ({\n        editingModuleId: ''\n      })),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    }))))), React.createElement(\"i\", {\n      className: \"fa fa-plus-circle fa-3x wbdv-add\",\n      onClick: () => this.props.createModule(this.props.courseId),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    }));\n  }\n\n}\n\nconst stateToPropertyMapper = state => {\n  return {\n    modules: state.modules.modules\n  };\n};\n\nconst dispatchToPropertyMapper = dispatch => {\n  return {\n    createModule: courseId => service.createModule(courseId, {\n      title: 'New module'\n    }).then(actualModule => dispatch(createModule(actualModule, courseId))),\n    findAllModulesForCourse: courseId => service.findModulesForCourse(courseId).then(actualModules => dispatch(findAllModulesForCourse(actualModules))),\n    // TODO: Instead of first getting the modules for course then dispatching the list of modules,\n    // you should instead dispatch something like this:\n    // dispatch({ type: SET_SELECTED_COURSE, courseId: courseId })\n    updateModule: (moduleId, module) => service.updateModule(moduleId, module).then(updatedModule => dispatch(updateModule(updatedModule))),\n    deleteModule: moduleId => service.deleteModule(moduleId).then(status => dispatch(deleteModule(moduleId)))\n  };\n};\n\nexport default connect(stateToPropertyMapper, dispatchToPropertyMapper)(ModuleListComponent);","map":{"version":3,"sources":["/Users/mocaa7/src/mocaa7/cs5610/wbdv-sp-20-mocaa7-client-react/src/components/CourseEditor/Modules/ModuleListComponent.js"],"names":["React","connect","Link","createModule","deleteModule","findAllModulesForCourse","updateModule","ModuleService","ModuleListItem","service","ModuleListComponent","Component","state","selectedModule","modules","componentDidMount","updateModules","findModulesForCourse","props","courseId","setState","componentDidUpdate","prevProps","prevState","snapshot","console","log","updateModuleTitle","event","module","title","target","value","toggleSelectedModule","history","push","_id","render","map","editingModuleId","stateToPropertyMapper","dispatchToPropertyMapper","dispatch","then","actualModule","actualModules","moduleId","updatedModule","status"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport {connect} from \"react-redux\";\nimport {Link} from 'react-router-dom'\nimport '../../../../node_modules/bootstrap/dist/css/bootstrap.css'\nimport '../../../../node_modules/font-awesome/css/font-awesome.min.css';\nimport '../../CourseEditor/CourseEditor.css'\nimport '../../CourseManager/CourseManager.css'\nimport {createModule, deleteModule, findAllModulesForCourse, updateModule} from '../../../actions/moduleActions'\nimport ModuleService from '../../../services/ModuleService';\nimport ModuleListItem from './ModuleListItem';\n\nconst service = new ModuleService();\n\nclass ModuleListComponent extends React.Component {\n    componentDidMount() {\n      this.updateModules();\n    }\n\n    async updateModules() {\n      const modules = await service.findModulesForCourse(this.props.courseId);\n      this.setState({modules: modules});\n    }\n\n    componentDidUpdate(prevProps, prevState, snapshot) {\n      console.log('componentDidUpdate');\n      if (this.props.courseId !== prevProps.courseId) {\n        console.log('course ID or state changed');\n        this.updateModules();\n      }\n    }\n\n    updateModuleTitle(event) {\n      this.setState(prevState => ({\n        module: {\n          ...prevState.module,\n          title: event.target.value\n        }}))\n    }\n\n    state = {\n      selectedModule: null,\n      // editingModule: null,\n      modules: []\n    };\n\n    // make highlighted, change URL to inclide module,\n    // and render all lessons related to the module\n    toggleSelectedModule(module) {\n      this.props.history.push(`/course/${this.props.courseId}/module/${module._id}`)\n      this.setState({selectedModule: module});\n      // if (this.state.selectedModule === module) {\n      //   this.props.history.push(`/course/${this.props.courseId}`)\n      //   this.setState({selectedModule: null});\n      // } else {\n      //   this.props.history.push(`/course/${this.props.courseId}/module/${module._id}`)\n      //   this.setState({selectedModule: module});\n      // }\n    }\n\n    render() {\n        return (\n          <div>\n            <ul className=\"list-group wbdv-module-list\">\n                {this.state.modules && this.state.modules.map(module =>\n                    // <li className={`list-group-item wbdv-module-item wbdv-module-item-title\n                    //   ${this.state.selectedModule === module ? 'active' : ''}`}\n                    //   key={module._id}>\n                    <li className={`list-group-item wbdv-module-item wbdv-module-item-title\n                      ${this.state.selectedModule === module ? 'active' : ''}`}\n                      onClick={() => this.toggleSelectedModule(module)} key={module._id}>\n                      {module.title}\n\n                          {/* {this.state.editingModuleId === module._id &&\n                          <div>\n                          <input onChange={(e) => this.updateModuleTitle(e)}\n                            value={this.state.module.title}/>\n                            <i className=\"fa-2x fa fa-check\"\n                            onClick={() => {\n                              this.props.updateModule(this.state.module).then(() =>\n                              this.setState({editingModuleId: ''}))}}/>\n                          </div>} */}\n\n                      <span className=\"float-right\">\n                        <i className=\"fa fa-trash fa-2x\"\n                          onClick={() => this.props.deleteModule(module._id)}/>\n                        <i className=\"fa fa-pencil fa-2x\"\n                          onClick={() => this.setState(prevState => ({editingModuleId: ''}))}/>\n                      </span>\n                    </li>\n                )}\n                </ul>\n                <i className=\"fa fa-plus-circle fa-3x wbdv-add\"\n                  onClick={() => this.props.createModule(this.props.courseId)}/>\n            </div>\n        );\n    }\n}\n\nconst stateToPropertyMapper = (state) => {\n    return {\n        modules: state.modules.modules\n    }\n}\n\nconst dispatchToPropertyMapper = (dispatch) => {\n    return {\n        createModule: (courseId) =>\n            service.createModule(courseId, {title: 'New module'})\n            .then(actualModule =>\n                dispatch(createModule(actualModule, courseId))),\n\n        findAllModulesForCourse: (courseId) =>\n            service.findModulesForCourse(courseId)\n            .then(actualModules =>\n                dispatch(findAllModulesForCourse(actualModules))),\n        // TODO: Instead of first getting the modules for course then dispatching the list of modules,\n        // you should instead dispatch something like this:\n        // dispatch({ type: SET_SELECTED_COURSE, courseId: courseId })\n\n        updateModule: (moduleId, module) =>\n            service.updateModule(moduleId, module)\n            .then(updatedModule =>\n                dispatch(updateModule(updatedModule))),\n\n        deleteModule: (moduleId) =>\n            service.deleteModule(moduleId)\n            .then(status =>\n                dispatch(deleteModule(moduleId)))\n    }\n}\n\nexport default connect(\n    stateToPropertyMapper,\n    dispatchToPropertyMapper)\n(ModuleListComponent)"]},"metadata":{},"sourceType":"module"}