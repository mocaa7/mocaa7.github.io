{"ast":null,"code":"var _jsxFileName = \"/Users/mocaa7/src/mocaa7/cs5610/wbdv-sp-20-mocaa7-client-react/src/components/CourseEditor/Widgets/WidgetListComponent.js\";\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport '../../../../node_modules/bootstrap/dist/css/bootstrap.css';\nimport '../../../../node_modules/font-awesome/css/font-awesome.min.css';\nimport '../../CourseEditor/CourseEditor.css';\nimport { createWidget, deleteWidget, findAllWidgetsForTopic, updateWidget, saveAllWidgets, moveWidgetUp, moveWidgetDown } from '../../../actions/widgetActions';\nimport WidgetListItemComponent from './WidgetListItemComponent';\nimport SaveAndPreviewComponent from './SaveAndPreviewComponent';\nimport WidgetService from '../../../services/WidgetService';\nconst service = new WidgetService(); // TODO: to solve - how can you update the changes of the widget to render\n// without saving it to the server (unless save all is pressed?)\n\nclass WidgetListComponent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      widgets: []\n    }; // this.updateWidgets()\n  } // TODO: remove when you understand how you can set it without the server\n\n\n  componentDidMount() {\n    this.updateWidgets();\n  } // TODO: check if correct (goes through all widgets and updates to server)\n\n\n  async onSaveAll() {\n    const widgetState = await this.props.saveAllWidgets(this.props.topicId, this.state.widgets);\n    const widgets = widgetState.widgets;\n\n    if (widgets) {\n      alert('it is not empty');\n\n      if (Array.isArray(widgets)) {\n        alert('it is also an array');\n        widgets.forEach(widget => console.log(widget));\n      }\n\n      console.log(JSON.stringify(widgets));\n    } else {\n      alert('fuck me widgets');\n    }\n\n    this.setState({\n      widgets: widgets\n    });\n  }\n\n  getLastElement() {\n    return this.state.widgets.length - 1;\n  }\n\n  async updateWidgets() {\n    const widgets = await service.findWidgetsForTopic(this.props.topicId);\n    this.setState({\n      widgets: widgets\n    });\n  } // TODO: learn how to use save all for later - currently this is all done on the server\n\n\n  async addWidget() {\n    await this.props.createWidget(this.props.topicId);\n    await this.updateWidgets();\n  } // TODO: learn how to use save all for later - currently this is all done on the server\n\n\n  async onDelete(widgetId) {\n    await this.props.deleteWidget(widgetId);\n    await this.updateWidgets();\n  }\n\n  swapElements(widgets, x, y) {\n    let temp = widgets[x];\n    widgets[x] = widgets[y];\n    widgets[y] = temp;\n    widgets[x].index = x;\n    widgets[y].index = y;\n    return widgets;\n  } // TODO: check if you need to manipulate the state or if this is enough passing the props\n\n\n  async moveUp(widget) {\n    debugger;\n    let index = this.state.widgets.indexOf(widget);\n    this.setState({\n      widgets: this.swapElements(this.state.widgets, index, index - 1)\n    });\n    this.props.moveWidgetUp(widget, this.state.widgets);\n    await this.onSaveAll(); // this.props.moveWidgetUp(widget);\n    // await this.updateWidgets();\n  }\n\n  async moveDown(widget) {\n    debugger;\n    let index = this.state.widgets.indexOf(widget);\n    this.setState({\n      widgets: this.swapElements(this.state.widgets, index, index + 1)\n    });\n    this.props.moveWidgetDown(widget, this.state.widgets);\n    await this.onSaveAll(); // this.props.moveWidgetDown(widget);\n    // await this.updateWidgets();\n  }\n\n  getWidgetIndex(widget) {\n    return this.state.widgets.indexOf(widget);\n  }\n\n  updateWidgetType() {} //TODO: is this how we update one widget?\n  // we need to pass update to each item\n  // updateOneWidget(newWidget) {\n  //   this.state.widgets.forEach(widget => {\n  //     if (widget.id === newWidget.id) {\n  //       return newWidget;\n  //     }\n  //   });\n  // }\n\n\n  render() {\n    return React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140\n      },\n      __self: this\n    }, JSON.stringify(this.state.widgets)), React.createElement(SaveAndPreviewComponent, {\n      saveAll: this.onSaveAll.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144\n      },\n      __self: this\n    }, this.state.widgets && this.state.widgets.map((widget, index) => React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147\n      },\n      __self: this\n    }, \"This is the shitty id: \", widget.id), React.createElement(WidgetListItemComponent, {\n      key: widget.id,\n      getIndex: this.getWidgetIndex.bind(this, widget),\n      getLastElement: this.getLastElement.bind(this),\n      index: index,\n      widget: widget,\n      moveUp: this.moveUp.bind(this, widget),\n      moveDown: this.moveDown.bind(this, widget),\n      onDelete: this.onDelete.bind(this, widget.id),\n      updateWidget: this.props.updateWidget // TODO: remove this later on\n      ,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149\n      },\n      __self: this\n    }))), React.createElement(\"div\", {\n      className: \"nav-item\",\n      onClick: () => this.addWidget(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164\n      },\n      __self: this\n    }, React.createElement(\"i\", {\n      className: \"nav-link fa fa-plus-circle fa-2x\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165\n      },\n      __self: this\n    }))));\n  }\n\n}\n\nconst stateToPropertyMapper = state => {\n  return {\n    widgets: state.widgets.widgets\n  };\n};\n\nconst dispatchToPropertyMapper = dispatch => {\n  return {\n    createWidget: topicId => service.createWidget(topicId, {\n      name: 'New widget',\n      widgetType: 'Heading'\n    }).then(actualWidget => dispatch(createWidget(actualWidget, topicId))),\n    findAllWidgetsForTopic: topicId => service.findWidgetsForTopic(topicId).then(actualWidgets => dispatch(findAllWidgetsForTopic(actualWidgets))),\n    updateWidget: (widgetId, widget) => service.updateWidget(widgetId, widget).then(updatedWidget => dispatch(updateWidget(updatedWidget))),\n    deleteWidget: widgetId => service.deleteWidget(widgetId).then(status => dispatch(deleteWidget(widgetId))),\n    saveAllWidgets: (topicId, widgets) => service.saveAllWidgets(topicId, widgets).then(returnedWidgets => dispatch(saveAllWidgets(returnedWidgets))),\n    moveWidgetUp: widget => dispatch(moveWidgetUp(widget)),\n    moveWidgetDown: widget => dispatch(moveWidgetDown(widget))\n  };\n};\n\nexport default connect(stateToPropertyMapper, dispatchToPropertyMapper)(WidgetListComponent);","map":{"version":3,"sources":["/Users/mocaa7/src/mocaa7/cs5610/wbdv-sp-20-mocaa7-client-react/src/components/CourseEditor/Widgets/WidgetListComponent.js"],"names":["React","connect","createWidget","deleteWidget","findAllWidgetsForTopic","updateWidget","saveAllWidgets","moveWidgetUp","moveWidgetDown","WidgetListItemComponent","SaveAndPreviewComponent","WidgetService","service","WidgetListComponent","Component","constructor","props","state","widgets","componentDidMount","updateWidgets","onSaveAll","widgetState","topicId","alert","Array","isArray","forEach","widget","console","log","JSON","stringify","setState","getLastElement","length","findWidgetsForTopic","addWidget","onDelete","widgetId","swapElements","x","y","temp","index","moveUp","indexOf","moveDown","getWidgetIndex","updateWidgetType","render","bind","map","id","stateToPropertyMapper","dispatchToPropertyMapper","dispatch","name","widgetType","then","actualWidget","actualWidgets","updatedWidget","status","returnedWidgets"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport {connect} from \"react-redux\";\nimport '../../../../node_modules/bootstrap/dist/css/bootstrap.css'\nimport '../../../../node_modules/font-awesome/css/font-awesome.min.css';\nimport '../../CourseEditor/CourseEditor.css'\nimport {\n  createWidget,\n  deleteWidget,\n  findAllWidgetsForTopic,\n  updateWidget,\n  saveAllWidgets,\n  moveWidgetUp,\n  moveWidgetDown\n} from '../../../actions/widgetActions'\nimport WidgetListItemComponent from './WidgetListItemComponent';\nimport SaveAndPreviewComponent from './SaveAndPreviewComponent';\nimport WidgetService from '../../../services/WidgetService'\n\nconst service = new WidgetService();\n\n// TODO: to solve - how can you update the changes of the widget to render\n// without saving it to the server (unless save all is pressed?)\nclass WidgetListComponent extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      widgets: [],\n    };\n    // this.updateWidgets()\n  }\n\n  // TODO: remove when you understand how you can set it without the server\n  componentDidMount() {\n    this.updateWidgets();\n  }\n\n  // TODO: check if correct (goes through all widgets and updates to server)\n  async onSaveAll() {\n    const widgetState = await this.props.saveAllWidgets(\n        this.props.topicId, this.state.widgets);\n\n    const widgets = widgetState.widgets;\n\n    if (widgets) {\n      alert('it is not empty');\n      if (Array.isArray((widgets))){\n        alert('it is also an array');\n        widgets.forEach(widget => console.log(widget));\n      }\n      console.log(JSON.stringify(widgets));\n    } else {\n      alert('fuck me widgets');\n    }\n\n\n\n    this.setState({widgets: widgets});\n  }\n\n  getLastElement() {\n    return this.state.widgets.length - 1;\n  }\n\n  async updateWidgets() {\n    const widgets = await service.findWidgetsForTopic(this.props.topicId);\n    this.setState({widgets: widgets});\n  }\n\n  // TODO: learn how to use save all for later - currently this is all done on the server\n  async addWidget() {\n    await this.props.createWidget(this.props.topicId);\n    await this.updateWidgets();\n  }\n\n  // TODO: learn how to use save all for later - currently this is all done on the server\n  async onDelete(widgetId) {\n    await this.props.deleteWidget(widgetId);\n    await this.updateWidgets();\n  }\n\n  swapElements(widgets, x, y) {\n    let temp = widgets[x];\n    widgets[x] = widgets[y];\n    widgets[y] = temp;\n    widgets[x].index = x;\n    widgets[y].index = y;\n    return widgets;\n  }\n\n  // TODO: check if you need to manipulate the state or if this is enough passing the props\n  async moveUp(widget) {\n    debugger;\n    let index = this.state.widgets.indexOf(widget);\n    this.setState(\n        {widgets: this.swapElements(this.state.widgets, index, index - 1)});\n\n    this.props.moveWidgetUp(widget, this.state.widgets);\n\n    await this.onSaveAll();\n    // this.props.moveWidgetUp(widget);\n    // await this.updateWidgets();\n  }\n\n  async moveDown(widget) {\n    debugger;\n    let index = this.state.widgets.indexOf(widget);\n    this.setState(\n        {widgets: this.swapElements(this.state.widgets, index, index + 1)});\n\n    this.props.moveWidgetDown(widget, this.state.widgets);\n\n    await this.onSaveAll();\n    // this.props.moveWidgetDown(widget);\n    // await this.updateWidgets();\n  }\n\n  getWidgetIndex(widget) {\n    return this.state.widgets.indexOf(widget);\n  }\n\n  updateWidgetType() {\n\n  }\n\n  //TODO: is this how we update one widget?\n  // we need to pass update to each item\n  // updateOneWidget(newWidget) {\n  //   this.state.widgets.forEach(widget => {\n  //     if (widget.id === newWidget.id) {\n  //       return newWidget;\n  //     }\n  //   });\n  // }\n\n  render() {\n    return (\n        <span>\n        {/* TODO: do not forget to remove this */}\n          <div>{JSON.stringify(this.state.widgets)}</div>\n\n        <SaveAndPreviewComponent\n            saveAll={this.onSaveAll.bind(this)}/>\n        <div>\n          {this.state.widgets && this.state.widgets.map((widget, index) =>\n              <div>\n                <p>This is the shitty id: {widget.id}</p>\n\n                <WidgetListItemComponent\n                    key={widget.id}\n                    getIndex={this.getWidgetIndex.bind(this, widget)}\n                    getLastElement={this.getLastElement.bind(this)}\n                    index={index}\n                    widget={widget}\n\n                    moveUp={this.moveUp.bind(this, widget)}\n                    moveDown={this.moveDown.bind(this, widget)}\n\n                    onDelete={this.onDelete.bind(this, widget.id)}\n                    updateWidget={this.props.updateWidget} // TODO: remove this later on\n                />\n              </div>)\n          }\n          <div className=\"nav-item\" onClick={() => this.addWidget()}>\n            <i className=\"nav-link fa fa-plus-circle fa-2x\"/>\n          </div>\n        </div>\n      </span>\n    )\n  }\n}\n\nconst stateToPropertyMapper = (state) => {\n  return {\n    widgets: state.widgets.widgets\n  }\n};\n\nconst dispatchToPropertyMapper = (dispatch) => {\n  return {\n    createWidget: (topicId) =>\n        service.createWidget(topicId,\n            {name: 'New widget', widgetType: 'Heading'})\n        .then(actualWidget =>\n            dispatch(createWidget(actualWidget, topicId))),\n\n    findAllWidgetsForTopic: (topicId) =>\n        service.findWidgetsForTopic(topicId)\n        .then(actualWidgets =>\n            dispatch(findAllWidgetsForTopic(actualWidgets))),\n\n    updateWidget: (widgetId, widget) =>\n        service.updateWidget(widgetId, widget)\n        .then(updatedWidget =>\n            dispatch(updateWidget(updatedWidget))),\n\n    deleteWidget: (widgetId) =>\n        service.deleteWidget(widgetId)\n        .then(status =>\n            dispatch(deleteWidget(widgetId))),\n\n    saveAllWidgets: (topicId, widgets) =>\n        service.saveAllWidgets(topicId, widgets)\n        .then(returnedWidgets =>\n            dispatch(saveAllWidgets(returnedWidgets))),\n\n    moveWidgetUp: (widget) =>\n        dispatch(moveWidgetUp(widget)),\n\n    moveWidgetDown: (widget) =>\n        dispatch(moveWidgetDown(widget))\n  }\n};\n\nexport default connect(\n    stateToPropertyMapper,\n    dispatchToPropertyMapper)\n(WidgetListComponent)"]},"metadata":{},"sourceType":"module"}