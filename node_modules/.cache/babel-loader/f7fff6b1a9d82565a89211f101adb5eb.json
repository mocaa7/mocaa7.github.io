{"ast":null,"code":"var _jsxFileName = \"/Users/mocaa7/src/mocaa7/cs5610/wbdv-sp-20-mocaa7-client-react/src/components/CourseEditor/Widgets/WidgetListComponent.js\";\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport '../../../../node_modules/bootstrap/dist/css/bootstrap.css';\nimport '../../../../node_modules/font-awesome/css/font-awesome.min.css';\nimport '../../CourseEditor/CourseEditor.css';\nimport { createWidget, deleteWidget, findAllWidgetsForTopic, updateWidget, moveWidgetUp, moveWidgetDown } from '../../../actions/widgetActions';\nimport WidgetListItemComponent from './WidgetListItemComponent';\nimport SaveAndPreviewComponent from './SaveAndPreviewComponent';\nimport WidgetService from '../../../services/WidgetService';\nconst service = new WidgetService(); // TODO: to solve - how can you update the changes of the widget to render\n// without saving it to the server (unless save all is pressed?)\n\nclass WidgetListComponent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      topWidget: null,\n      bottomWidget: null,\n      widgets: []\n    };\n    this.updateWidgets();\n  } // TODO: this should not update all the time\n  // componentDidMount() {\n  //   this.updateWidgets();\n  // }\n  // TODO: check if correct (goes through all widgets and updates to server)\n\n\n  onSaveAll() {\n    this.state.widgets.map(widget => {\n      this.props.updateWidget(widget._id, widget);\n    });\n  }\n\n  async updateWidgets() {\n    const widgets = await service.findWidgetsForTopic(this.props.topicId);\n    this.setState({\n      widgets: widgets\n    });\n  }\n\n  async addWidget() {\n    await this.props.createWidget(this.props.topicId);\n    await this.updateWidgets();\n  }\n\n  async onDelete(widgetId) {\n    await this.props.deleteWidget(widgetId);\n    await this.updateWidgets();\n  }\n\n  moveUp(widget) {\n    dispatch(moveWidgetUp(widget));\n  }\n\n  moveDown(widget) {\n    dispatch(moveWidgetDown(widget));\n  } //TODO: is this how we update one widget?\n  // we need to pass update to each item\n\n\n  updateOneWidget(newWidget) {\n    this.state.widgets.forEach(widget => {\n      if (widget._id === newWidget._id) {\n        return newWidget;\n      }\n    });\n  }\n\n  render() {\n    return React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    }, React.createElement(SaveAndPreviewComponent, {\n      saveAll: this.onSaveAll.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }, this.state.widgets && this.state.widgets.map(widget => React.createElement(WidgetListItemComponent, {\n      key: widget._id,\n      widget: widget,\n      onDelete: this.onDelete.bind(this),\n      updateWidget: this.props.updateWidget // TODO: remove this later on\n      ,\n      moveUp: this.moveUp.bind(this),\n      moveDown: this.moveDown.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"nav-item\",\n      onClick: () => this.addWidget(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    }, React.createElement(\"i\", {\n      className: \"nav-link fa fa-plus-circle fa-2x\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }))));\n  }\n\n}\n\nconst stateToPropertyMapper = state => {\n  return {\n    widgets: state.widgets.widgets\n  };\n};\n\nconst dispatchToPropertyMapper = dispatch => {\n  return {\n    createWidget: topicId => service.createWidget(topicId, {\n      type: 'New widget',\n      widgetType: 'Heading'\n    }).then(actualWidget => dispatch(createWidget(actualWidget, topicId))),\n    findAllWidgetsForTopic: topicId => service.findWidgetsForTopic(topicId).then(actualWidgets => dispatch(findAllWidgetsForTopic(actualWidgets))),\n    updateWidget: (widgetId, widget) => service.updateWidget(widgetId, widget).then(updatedWidget => dispatch(updateWidget(updatedWidget))),\n    deleteWidget: widgetId => service.deleteWidget(widgetId).then(status => dispatch(deleteWidget(widgetId))),\n    saveAllWidgets: (topicId, widgets) => service.saveAllWidgets(topicId, widgets).then(returnedWidgets => dispatch(saveAllWidgets(returnedWidgets))),\n    moveWidgetUp: widget => dispatch(moveWidgetUp)\n  };\n};\n\nexport default connect(stateToPropertyMapper, dispatchToPropertyMapper)(WidgetListComponent);","map":{"version":3,"sources":["/Users/mocaa7/src/mocaa7/cs5610/wbdv-sp-20-mocaa7-client-react/src/components/CourseEditor/Widgets/WidgetListComponent.js"],"names":["React","connect","createWidget","deleteWidget","findAllWidgetsForTopic","updateWidget","moveWidgetUp","moveWidgetDown","WidgetListItemComponent","SaveAndPreviewComponent","WidgetService","service","WidgetListComponent","Component","constructor","props","state","topWidget","bottomWidget","widgets","updateWidgets","onSaveAll","map","widget","_id","findWidgetsForTopic","topicId","setState","addWidget","onDelete","widgetId","moveUp","dispatch","moveDown","updateOneWidget","newWidget","forEach","render","bind","stateToPropertyMapper","dispatchToPropertyMapper","type","widgetType","then","actualWidget","actualWidgets","updatedWidget","status","saveAllWidgets","returnedWidgets"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport {connect} from \"react-redux\";\nimport '../../../../node_modules/bootstrap/dist/css/bootstrap.css'\nimport '../../../../node_modules/font-awesome/css/font-awesome.min.css';\nimport '../../CourseEditor/CourseEditor.css'\nimport {\n  createWidget,\n  deleteWidget,\n  findAllWidgetsForTopic,\n  updateWidget,\n  moveWidgetUp,\n  moveWidgetDown\n} from '../../../actions/widgetActions'\nimport WidgetListItemComponent from './WidgetListItemComponent';\nimport SaveAndPreviewComponent from './SaveAndPreviewComponent';\nimport WidgetService from '../../../services/WidgetService'\n\nconst service = new WidgetService();\n\n\n// TODO: to solve - how can you update the changes of the widget to render\n// without saving it to the server (unless save all is pressed?)\nclass WidgetListComponent extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      topWidget: null,\n      bottomWidget: null,\n      widgets: []\n    };\n\n    this.updateWidgets()\n  }\n\n  // TODO: this should not update all the time\n  // componentDidMount() {\n  //   this.updateWidgets();\n  // }\n\n  // TODO: check if correct (goes through all widgets and updates to server)\n  onSaveAll() {\n    this.state.widgets.map(widget => {\n      this.props.updateWidget(widget._id, widget)\n    });\n  }\n\n  async updateWidgets() {\n    const widgets = await service.findWidgetsForTopic(this.props.topicId);\n    this.setState({widgets: widgets});\n  }\n\n  async addWidget() {\n    await this.props.createWidget(this.props.topicId);\n    await this.updateWidgets();\n  }\n\n  async onDelete(widgetId) {\n    await this.props.deleteWidget(widgetId);\n    await this.updateWidgets();\n  }\n\n  moveUp(widget) {\n    dispatch(moveWidgetUp(widget));\n  }\n\n  moveDown(widget) {\n    dispatch(moveWidgetDown(widget))\n  }\n\n  //TODO: is this how we update one widget?\n  // we need to pass update to each item\n  updateOneWidget(newWidget) {\n    this.state.widgets.forEach(widget => {\n      if(widget._id === newWidget._id) {\n        return newWidget;\n      }\n    });\n  }\n\n\n  render() {\n    return (\n        <span>\n          <SaveAndPreviewComponent\n              saveAll={this.onSaveAll.bind(this)}/>\n          <div>\n            {this.state.widgets && this.state.widgets.map(widget =>\n                <WidgetListItemComponent\n                    key={widget._id}\n                    widget={widget}\n                    onDelete={this.onDelete.bind(this)}\n                    updateWidget={this.props.updateWidget} // TODO: remove this later on\n                    moveUp={this.moveUp.bind(this)}\n                    moveDown={this.moveDown.bind(this)}\n                />)\n            }\n            <div className=\"nav-item\" onClick={() => this.addWidget()}>\n              <i className=\"nav-link fa fa-plus-circle fa-2x\"/>\n            </div>\n          </div>\n        </span>\n    )\n  }\n}\n\nconst stateToPropertyMapper = (state) => {\n  return {\n    widgets: state.widgets.widgets\n  }\n};\n\nconst dispatchToPropertyMapper = (dispatch) => {\n  return {\n    createWidget: (topicId) =>\n        service.createWidget(topicId,\n            {type: 'New widget', widgetType: 'Heading'})\n        .then(actualWidget =>\n            dispatch(createWidget(actualWidget, topicId))),\n\n    findAllWidgetsForTopic: (topicId) =>\n        service.findWidgetsForTopic(topicId)\n        .then(actualWidgets =>\n            dispatch(findAllWidgetsForTopic(actualWidgets))),\n\n    updateWidget: (widgetId, widget) =>\n        service.updateWidget(widgetId, widget)\n        .then(updatedWidget =>\n            dispatch(updateWidget(updatedWidget))),\n\n    deleteWidget: (widgetId) =>\n        service.deleteWidget(widgetId)\n        .then(status =>\n            dispatch(deleteWidget(widgetId))),\n    \n    saveAllWidgets: (topicId, widgets) =>\n      service.saveAllWidgets(topicId, widgets)\n      .then(returnedWidgets =>\n        dispatch(saveAllWidgets(returnedWidgets))),\n    \n    moveWidgetUp: (widget) =>\n        dispatch(moveWidgetUp)\n  }\n};\n\nexport default connect(\n    stateToPropertyMapper,\n    dispatchToPropertyMapper)\n(WidgetListComponent)"]},"metadata":{},"sourceType":"module"}