{"ast":null,"code":"var _jsxFileName = \"/Users/mocaa7/src/mocaa7/cs5610/wbdv-sp-20-mocaa7-client-react/src/components/CourseEditor/Widgets/WidgetListComponent.js\";\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport '../../../../node_modules/bootstrap/dist/css/bootstrap.css';\nimport '../../../../node_modules/font-awesome/css/font-awesome.min.css';\nimport '../../CourseEditor/CourseEditor.css';\nimport { createWidget, deleteWidget, findAllWidgetsForTopic, updateWidget, saveAllWidgets, moveWidgetUp, moveWidgetDown } from '../../../actions/widgetActions';\nimport WidgetListItemComponent from './WidgetListItemComponent';\nimport SaveAndPreviewComponent from './SaveAndPreviewComponent';\nimport WidgetService from '../../../services/WidgetService';\nconst service = new WidgetService(); // TODO: to solve - how can you update the changes of the widget to render\n// without saving it to the server (unless save all is pressed?)\n\nclass WidgetListComponent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      topWidget: null,\n      bottomWidget: null,\n      widgets: []\n    }; // TODO: check if this only works when server is refreshed\n\n    this.updateWidgets();\n  } // TODO: check if correct (goes through all widgets and updates to server)\n\n\n  onSaveAll() {\n    this.props.saveAllWidgets(this.state.widgets, this.props.topicId);\n  }\n\n  getLastElement() {\n    return this.state.widgets.length - 1;\n  }\n\n  async updateWidgets() {\n    const widgets = await service.findWidgetsForTopic(this.props.topicId);\n    this.setState({\n      widgets: widgets\n    });\n  }\n\n  async addWidget() {\n    await this.props.createWidget(this.props.topicId);\n    await this.updateWidgets();\n  }\n\n  async onDelete(widgetId) {\n    await this.props.deleteWidget(widgetId);\n    await this.updateWidgets();\n  } // TODO: check if you need to manipulate the state or if this is enough passing the props\n  // moveUp(widget) {\n  //   this.props.moveWidgetUp(widget);\n  // }\n  // moveDown(widget) {\n  //   this.props.moveWidgetDown(widget);\n  // }\n  //TODO: is this how we update one widget?\n  // we need to pass update to each item\n\n\n  updateOneWidget(newWidget) {\n    this.state.widgets.forEach(widget => {\n      if (widget._id === newWidget._id) {\n        return newWidget;\n      }\n    });\n  }\n\n  render() {\n    return React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }, React.createElement(SaveAndPreviewComponent, {\n      saveAll: this.onSaveAll.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    }, this.state.widgets && this.state.widgets.map((widget, index) => React.createElement(WidgetListItemComponent, {\n      key: widget._id,\n      index: index,\n      getLastElement: this.getLastElement,\n      widget: widget,\n      moveUp: this.props.moveUp,\n      moveDown: this.props.moveDown,\n      onDelete: this.onDelete.bind(this),\n      updateWidget: this.props.updateWidget // TODO: remove this later on\n      ,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"nav-item\",\n      onClick: () => this.addWidget(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }, React.createElement(\"i\", {\n      className: \"nav-link fa fa-plus-circle fa-2x\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }))));\n  }\n\n}\n\nconst stateToPropertyMapper = state => {\n  return {\n    widgets: state.widgets.widgets\n  };\n};\n\nconst dispatchToPropertyMapper = dispatch => {\n  return {\n    createWidget: topicId => service.createWidget(topicId, {\n      type: 'New widget',\n      widgetType: 'Heading'\n    }).then(actualWidget => dispatch(createWidget(actualWidget, topicId))),\n    findAllWidgetsForTopic: topicId => service.findWidgetsForTopic(topicId).then(actualWidgets => dispatch(findAllWidgetsForTopic(actualWidgets))),\n    updateWidget: (widgetId, widget) => service.updateWidget(widgetId, widget).then(updatedWidget => dispatch(updateWidget(updatedWidget))),\n    deleteWidget: widgetId => service.deleteWidget(widgetId).then(status => dispatch(deleteWidget(widgetId))),\n    saveAllWidgets: (topicId, widgets) => service.saveAllWidgets(topicId, widgets).then(returnedWidgets => dispatch(saveAllWidgets(returnedWidgets))),\n    moveWidgetUp: widget => dispatch(moveWidgetUp(widget)),\n    moveWidgetDown: widget => dispatch(moveWidgetDown(widget))\n  };\n};\n\nexport default connect(stateToPropertyMapper, dispatchToPropertyMapper)(WidgetListComponent);","map":{"version":3,"sources":["/Users/mocaa7/src/mocaa7/cs5610/wbdv-sp-20-mocaa7-client-react/src/components/CourseEditor/Widgets/WidgetListComponent.js"],"names":["React","connect","createWidget","deleteWidget","findAllWidgetsForTopic","updateWidget","saveAllWidgets","moveWidgetUp","moveWidgetDown","WidgetListItemComponent","SaveAndPreviewComponent","WidgetService","service","WidgetListComponent","Component","constructor","props","state","topWidget","bottomWidget","widgets","updateWidgets","onSaveAll","topicId","getLastElement","length","findWidgetsForTopic","setState","addWidget","onDelete","widgetId","updateOneWidget","newWidget","forEach","widget","_id","render","bind","map","index","moveUp","moveDown","stateToPropertyMapper","dispatchToPropertyMapper","dispatch","type","widgetType","then","actualWidget","actualWidgets","updatedWidget","status","returnedWidgets"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { connect } from \"react-redux\";\nimport '../../../../node_modules/bootstrap/dist/css/bootstrap.css'\nimport '../../../../node_modules/font-awesome/css/font-awesome.min.css';\nimport '../../CourseEditor/CourseEditor.css'\nimport {\n  createWidget,\n  deleteWidget,\n  findAllWidgetsForTopic,\n  updateWidget,\n  saveAllWidgets,\n  moveWidgetUp,\n  moveWidgetDown\n} from '../../../actions/widgetActions'\nimport WidgetListItemComponent from './WidgetListItemComponent';\nimport SaveAndPreviewComponent from './SaveAndPreviewComponent';\nimport WidgetService from '../../../services/WidgetService'\n\nconst service = new WidgetService();\n\n\n// TODO: to solve - how can you update the changes of the widget to render\n// without saving it to the server (unless save all is pressed?)\nclass WidgetListComponent extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      topWidget: null,\n      bottomWidget: null,\n      widgets: [],\n    };\n    // TODO: check if this only works when server is refreshed\n    this.updateWidgets()\n  }\n\n  // TODO: check if correct (goes through all widgets and updates to server)\n  onSaveAll() {\n    this.props.saveAllWidgets(this.state.widgets, this.props.topicId);\n  }\n\n  getLastElement() {\n    return this.state.widgets.length - 1;\n  }\n\n  async updateWidgets() {\n    const widgets = await service.findWidgetsForTopic(this.props.topicId);\n    this.setState({ widgets: widgets });\n  }\n\n  async addWidget() {\n    await this.props.createWidget(this.props.topicId);\n    await this.updateWidgets();\n  }\n\n  async onDelete(widgetId) {\n    await this.props.deleteWidget(widgetId);\n    await this.updateWidgets();\n  }\n\n  // TODO: check if you need to manipulate the state or if this is enough passing the props\n  // moveUp(widget) {\n  //   this.props.moveWidgetUp(widget);\n  // }\n\n  // moveDown(widget) {\n  //   this.props.moveWidgetDown(widget);\n  // }\n\n  //TODO: is this how we update one widget?\n  // we need to pass update to each item\n  updateOneWidget(newWidget) {\n    this.state.widgets.forEach(widget => {\n      if (widget._id === newWidget._id) {\n        return newWidget;\n      }\n    });\n  }\n\n\n  render() {\n    return (\n      <span>\n        <SaveAndPreviewComponent\n          saveAll={this.onSaveAll.bind(this)} />\n        <div>\n          {this.state.widgets && this.state.widgets.map((widget, index) =>\n            <WidgetListItemComponent\n              key={widget._id}\n\n              index={index}\n              getLastElement={this.getLastElement}\n\n              widget={widget}\n\n              moveUp={this.props.moveUp}\n              moveDown={this.props.moveDown}\n\n              onDelete={this.onDelete.bind(this)}\n              updateWidget={this.props.updateWidget} // TODO: remove this later on\n            />)\n          }\n          <div className=\"nav-item\" onClick={() => this.addWidget()}>\n            <i className=\"nav-link fa fa-plus-circle fa-2x\" />\n          </div>\n        </div>\n      </span>\n    )\n  }\n}\n\nconst stateToPropertyMapper = (state) => {\n  return {\n    widgets: state.widgets.widgets\n  }\n};\n\nconst dispatchToPropertyMapper = (dispatch) => {\n  return {\n    createWidget: (topicId) =>\n      service.createWidget(topicId,\n        { type: 'New widget', widgetType: 'Heading' })\n        .then(actualWidget =>\n          dispatch(createWidget(actualWidget, topicId))),\n\n    findAllWidgetsForTopic: (topicId) =>\n      service.findWidgetsForTopic(topicId)\n        .then(actualWidgets =>\n          dispatch(findAllWidgetsForTopic(actualWidgets))),\n\n    updateWidget: (widgetId, widget) =>\n      service.updateWidget(widgetId, widget)\n        .then(updatedWidget =>\n          dispatch(updateWidget(updatedWidget))),\n\n    deleteWidget: (widgetId) =>\n      service.deleteWidget(widgetId)\n        .then(status =>\n          dispatch(deleteWidget(widgetId))),\n\n    saveAllWidgets: (topicId, widgets) =>\n      service.saveAllWidgets(topicId, widgets)\n        .then(returnedWidgets =>\n          dispatch(saveAllWidgets(returnedWidgets))),\n\n    moveWidgetUp: (widget) =>\n      dispatch(moveWidgetUp(widget)),\n\n    moveWidgetDown: (widget) =>\n      dispatch(moveWidgetDown(widget)),\n  }\n};\n\nexport default connect(\n  stateToPropertyMapper,\n  dispatchToPropertyMapper)\n  (WidgetListComponent)"]},"metadata":{},"sourceType":"module"}