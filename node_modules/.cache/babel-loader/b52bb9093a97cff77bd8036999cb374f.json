{"ast":null,"code":"var _jsxFileName = \"/Users/mocaa7/src/mocaa7/cs5610/wbdv-sp-20-mocaa7-client-react/src/components/CourseEditor/Modules/ModuleListComponent.js\";\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Link } from 'react-router-dom';\nimport '../../../../node_modules/bootstrap/dist/css/bootstrap.css';\nimport '../../../../node_modules/font-awesome/css/font-awesome.min.css';\nimport '../../CourseEditor/CourseEditor.css';\nimport '../../CourseManager/CourseManager.css';\nimport { createModule, deleteModule, findAllModulesForCourse, updateModule } from '../../../actions/moduleActions';\nimport ModuleService from '../../../services/ModuleService';\nimport ModuleListItem from './ModuleListItem';\nimport { getNodeText } from \"@testing-library/react\";\nconst service = new ModuleService();\n\nclass ModuleListComponent extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      selectedModuleId: null,\n      modules: []\n    };\n  }\n\n  componentDidMount() {\n    this.updateModules();\n  }\n\n  async updateModules() {\n    const modules = await service.findModulesForCourse(this.props.courseId);\n    this.setState({\n      modules: modules\n    });\n  } // componentDidUpdate(prevProps, prevState, snapshot) {\n  //   console.log('componentDidUpdate');\n  //   if (this.props.courseId !== prevProps.courseId) {\n  //     console.log('course ID or state changed');\n  //     this.updateModules();\n  //   }\n  // }\n  // autofocus: Specifies that an <input> element should automatically get focus when the page loads\n  // dirname: Specifies that the text direction will be submitted {inputname.dir}\n  //\n  // updateModuleTitle(event) {\n  //   this.setState(prevState => (\n  //     {module: {...prevState.module, title: event.target.value}}\n  //   ))\n  // }\n  // state = {\n  //   selectedModule: null,\n  //   editingModule: null,\n  //   modules: []\n  // };\n\n\n  toggleSelectedModule(module) {\n    this.props.history.push(`/course/${this.props.courseId}/module/${module._id}`);\n    this.setState({\n      selectedModule: module\n    }); // if (this.state.selectedModule === module) {\n    //   this.props.history.push(`/course/${this.props.courseId}`)\n    //   this.setState({selectedModule: null});\n    // }\n  } // async deleteModule(moduleId) {\n  //   await this.props.deleteModule(moduleId);\n  //   this.updateModules();\n  // }\n\n\n  async addModule() {\n    await this.props.createModule(this.props.courseId);\n    this.updateModules();\n  } // async saveModule(module) {\n  //   this.setState({editingModule: null});\n  //   await this.props.updateModule(module._id, module);\n  //   this.updateModules();\n  // }\n  // Goal: take the new text from event.target.value, and update the state\n  // for the given module with this new value.\n  // onModuleTitleChange(event, updatedModule) {\n  //   // newTitle = event.target.value;\n  //   // const newModules = this.state.modules.map(module => {\n  //   //   if (module._id === updatedModule._id) {\n  //   //     return {...module, title: newTitle};\n  //   //   }\n  //   //   return module;\n  //   // });\n  //   // const newModules = this.state.modules.map(module => {\n  //   //   if (module._id === updatedModule._id) {\n  //   //     return {...module, title: newTitle};\n  //   //   }\n  //   //   return module;\n  //   // });\n  //   // this.setState({modules: newModules});\n  //   // const newModules = [...this.state.modules];\n  //   // newModules.forEach(module => {\n  //   //   if (module._id === updatedModule._id) {\n  //   //     module.title = newTitle;\n  //   //   }\n  //   // });\n  // }\n\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    }, React.createElement(\"ul\", {\n      className: \"list-group wbdv-module-list\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    }, this.state.modules && this.state.modules.map(module => React.createElement(ModuleListItem, {\n      key: module._id,\n      isSelected: module._id === this.state.selectedModuleId,\n      module: module,\n      onSelect: this.onSelect.bind(this, module._id),\n      onDelete: this.onDelete.bind(this, module._id),\n      onSave: this.onSave.bind(this, module._id),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    }))), React.createElement(\"i\", {\n      className: \"fa fa-plus-circle fa-3x wbdv-add\",\n      onClick: () => this.addModule(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118\n      },\n      __self: this\n    }));\n  }\n\n  onSelect(moduleId) {\n    this.setState({\n      selectedModuleId: moduleId\n    });\n    this.props.history.push(`/course/${this.props.courseId}/module/${moduleId}`);\n  }\n\n  async onDelete(moduleId) {\n    this.setState({\n      selectedModuleId: moduleId\n    });\n    await this.props.deleteModule(moduleId);\n    await this.updateModules();\n  }\n\n  async onSave(moduleId, newModule) {\n    console.log(`Saving module ${moduleId} with content ${JSON.stringify(newModule)}`);\n    await this.props.updateModule(moduleId, newModule);\n    await this.updateModules();\n  }\n\n}\n\nconst stateToPropertyMapper = state => {\n  return {\n    modules: state.modules.modules\n  };\n};\n\nconst dispatchToPropertyMapper = dispatch => {\n  return {\n    createModule: courseId => service.createModule(courseId, {\n      title: 'New module'\n    }).then(actualModule => dispatch(createModule(actualModule, courseId))),\n    findAllModulesForCourse: courseId => service.findModulesForCourse(courseId).then(actualModules => dispatch(findAllModulesForCourse(actualModules))),\n    // TODO: Instead of first getting the modules for course then dispatching the list of modules,\n    // you should instead dispatch something like this:\n    // dispatch({ type: SET_SELECTED_COURSE, courseId: courseId })\n    updateModule: (moduleId, module) => service.updateModule(moduleId, module).then(updatedModule => dispatch(updateModule(updatedModule))),\n    deleteModule: moduleId => service.deleteModule(moduleId).then(status => dispatch(deleteModule(moduleId)))\n  };\n};\n\nexport default connect(stateToPropertyMapper, dispatchToPropertyMapper)(ModuleListComponent);","map":{"version":3,"sources":["/Users/mocaa7/src/mocaa7/cs5610/wbdv-sp-20-mocaa7-client-react/src/components/CourseEditor/Modules/ModuleListComponent.js"],"names":["React","connect","Link","createModule","deleteModule","findAllModulesForCourse","updateModule","ModuleService","ModuleListItem","getNodeText","service","ModuleListComponent","Component","state","selectedModuleId","modules","componentDidMount","updateModules","findModulesForCourse","props","courseId","setState","toggleSelectedModule","module","history","push","_id","selectedModule","addModule","render","map","onSelect","bind","onDelete","onSave","moduleId","newModule","console","log","JSON","stringify","stateToPropertyMapper","dispatchToPropertyMapper","dispatch","title","then","actualModule","actualModules","updatedModule","status"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport {connect} from \"react-redux\";\nimport {Link} from 'react-router-dom'\nimport '../../../../node_modules/bootstrap/dist/css/bootstrap.css'\nimport '../../../../node_modules/font-awesome/css/font-awesome.min.css';\nimport '../../CourseEditor/CourseEditor.css'\nimport '../../CourseManager/CourseManager.css'\nimport {createModule, deleteModule, findAllModulesForCourse, updateModule} from '../../../actions/moduleActions'\nimport ModuleService from '../../../services/ModuleService';\nimport ModuleListItem from './ModuleListItem';\nimport { getNodeText } from \"@testing-library/react\";\n\nconst service = new ModuleService();\n\nclass ModuleListComponent extends React.Component {\n    componentDidMount() {\n      this.updateModules();\n    }\n\n    async updateModules() {\n      const modules = await service.findModulesForCourse(this.props.courseId);\n      this.setState({modules: modules});\n    }\n\n    // componentDidUpdate(prevProps, prevState, snapshot) {\n    //   console.log('componentDidUpdate');\n    //   if (this.props.courseId !== prevProps.courseId) {\n    //     console.log('course ID or state changed');\n    //     this.updateModules();\n    //   }\n    // }\n    // autofocus: Specifies that an <input> element should automatically get focus when the page loads\n    // dirname: Specifies that the text direction will be submitted {inputname.dir}\n    //\n\n    // updateModuleTitle(event) {\n    //   this.setState(prevState => (\n    //     {module: {...prevState.module, title: event.target.value}}\n    //   ))\n    // }\n\n    // state = {\n    //   selectedModule: null,\n    //   editingModule: null,\n    //   modules: []\n    // };\n\n    toggleSelectedModule(module) {\n      this.props.history.push(`/course/${this.props.courseId}/module/${module._id}`)\n      this.setState({selectedModule: module});\n      // if (this.state.selectedModule === module) {\n      //   this.props.history.push(`/course/${this.props.courseId}`)\n      //   this.setState({selectedModule: null});\n      // }\n    }\n\n    // async deleteModule(moduleId) {\n    //   await this.props.deleteModule(moduleId);\n    //   this.updateModules();\n    // }\n\n    async addModule() {\n      await this.props.createModule(this.props.courseId);\n      this.updateModules();\n    }\n\n    // async saveModule(module) {\n    //   this.setState({editingModule: null});\n    //   await this.props.updateModule(module._id, module);\n    //   this.updateModules();\n    // }\n\n    // Goal: take the new text from event.target.value, and update the state\n    // for the given module with this new value.\n    // onModuleTitleChange(event, updatedModule) {\n    //   // newTitle = event.target.value;\n      \n    //   // const newModules = this.state.modules.map(module => {\n    //   //   if (module._id === updatedModule._id) {\n    //   //     return {...module, title: newTitle};\n    //   //   }\n    //   //   return module;\n    //   // });\n\n    //   // const newModules = this.state.modules.map(module => {\n    //   //   if (module._id === updatedModule._id) {\n    //   //     return {...module, title: newTitle};\n    //   //   }\n    //   //   return module;\n    //   // });\n\n    //   // this.setState({modules: newModules});\n    //   // const newModules = [...this.state.modules];\n      \n    //   // newModules.forEach(module => {\n    //   //   if (module._id === updatedModule._id) {\n    //   //     module.title = newTitle;\n    //   //   }\n    //   // });\n\n    // }\n\n    render() {\n        return (\n          <div>\n            <ul className=\"list-group wbdv-module-list\">\n                {this.state.modules && this.state.modules.map(module =>\n                    <ModuleListItem\n                      key={module._id}\n                      isSelected={module._id === this.state.selectedModuleId}\n                      module={module}\n                      onSelect={this.onSelect.bind(this, module._id)}\n                      onDelete={this.onDelete.bind(this, module._id)}\n                      onSave={this.onSave.bind(this, module._id)}\n                      />\n                )}\n                </ul>\n                <i className=\"fa fa-plus-circle fa-3x wbdv-add\"\n                  onClick={() => this.addModule()}/>\n            </div>\n        );\n    }\n\n    state = {\n      selectedModuleId: null,\n      modules: [],\n    }\n\n    onSelect(moduleId) {\n      this.setState({selectedModuleId: moduleId});\n      this.props.history.push(`/course/${this.props.courseId}/module/${moduleId}`)\n    }\n\n    async onDelete(moduleId) {\n      this.setState({selectedModuleId: moduleId});\n      await this.props.deleteModule(moduleId);\n      await this.updateModules();\n    }\n\n    async onSave(moduleId, newModule) {\n      console.log(`Saving module ${moduleId} with content ${JSON.stringify(newModule)}`);\n      await this.props.updateModule(moduleId, newModule);\n      await this.updateModules();\n    }\n}\n\nconst stateToPropertyMapper = (state) => {\n    return {\n        modules: state.modules.modules\n    }\n}\n\nconst dispatchToPropertyMapper = (dispatch) => {\n    return {\n        createModule: (courseId) =>\n            service.createModule(courseId, {title: 'New module'})\n            .then(actualModule =>\n                dispatch(createModule(actualModule, courseId))),\n\n        findAllModulesForCourse: (courseId) =>\n            service.findModulesForCourse(courseId)\n            .then(actualModules =>\n                dispatch(findAllModulesForCourse(actualModules))),\n        \n        // TODO: Instead of first getting the modules for course then dispatching the list of modules,\n        // you should instead dispatch something like this:\n        // dispatch({ type: SET_SELECTED_COURSE, courseId: courseId })\n\n        updateModule: (moduleId, module) =>\n            service.updateModule(moduleId, module)\n            .then(updatedModule =>\n                dispatch(updateModule(updatedModule))),\n\n        deleteModule: (moduleId) =>\n            service.deleteModule(moduleId)\n            .then(status =>\n                dispatch(deleteModule(moduleId)))\n    }\n}\n\nexport default connect(\n    stateToPropertyMapper,\n    dispatchToPropertyMapper)\n(ModuleListComponent)"]},"metadata":{},"sourceType":"module"}